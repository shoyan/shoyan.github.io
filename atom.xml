<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SHOYAN BLOG]]></title>
  <link href="http://48n.jp/atom.xml" rel="self"/>
  <link href="http://48n.jp/"/>
  <updated>2019-08-02T18:04:24+09:00</updated>
  <id>http://48n.jp/</id>
  <author>
    <name><![CDATA[Shohei Yamasaki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[テストカバレッジ100%を目指さない理由]]></title>
    <link href="http://48n.jp/blog/2019/08/02/why-do-not-i-aim-for-100-test-coverage/"/>
    <updated>2019-08-02T17:47:20+09:00</updated>
    <id>http://48n.jp/blog/2019/08/02/why-do-not-i-aim-for-100-test-coverage</id>
    <content type="html"><![CDATA[<h2 id="結論">結論</h2>

<p>テストカバレッジ100%は目指さない</p>

<h2 id="理由">理由</h2>

<p>以前、このようなツイートをしました。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">マージ条件に作成したコードのテストカバレッジが100%であることというプロジェクトを見たことがあります</p>&mdash; しょーやん (@sinn_shoyan) <a href="https://twitter.com/sinn_shoyan/status/1155279098102472705?ref_src=twsrc%5Etfw">July 28, 2019</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>テストカバレッジ100%に違和感を感じない人はもう少し勉強した方がいいですね。</p>

<p>テストカバレッジ100%を目指すとこのようになってしまいます。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">テストカバレッジ100%を目指すとどうなるかを説明しましょう。
テストの目的がカバレッジを通すことになってしまい、意味のないテストが乱立します</p>&mdash; しょーやん (@sinn_shoyan) <a href="https://twitter.com/sinn_shoyan/status/1155279684218675201?ref_src=twsrc%5Etfw">July 28, 2019</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>さらにテストの問題も発生します。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">さらに、コードとテストコードが密結合になり、コードを少し変えるとテストが落ちるという状態になります。
リファクタリングする場合、テストコードも書き直しになります</p>&mdash; しょーやん (@sinn_shoyan) <a href="https://twitter.com/sinn_shoyan/status/1155280247924768772?ref_src=twsrc%5Etfw">July 28, 2019</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>テストカバレッジの問題については次の記事に詳しく書いてあります。</p>

<ul>
  <li><a herf="https://qiita.com/bremen/items/d02eb38e790b93f44728" target="_blank">テストカバレッジ100%を追求しても品質は高くならない理由と推奨されるカバレッジの目標値について</a></li>
</ul>

<p>全てのコードにコメントを書くのは馬鹿げていると感じる人は多いでしょう。全てのコードにテストを書くということも同じように考えるとどうでしょう。何事も過ぎたるは及ばざるが如しです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[データベース固有の関数の使用を避けるべき理由]]></title>
    <link href="http://48n.jp/blog/2019/04/25/avoid-using-database-specific-functions/"/>
    <updated>2019-04-25T16:21:18+09:00</updated>
    <id>http://48n.jp/blog/2019/04/25/avoid-using-database-specific-functions</id>
    <content type="html"><![CDATA[<p>こんにちは、しょーやんです。</p>

<p>私はエンジニアとして12年目で、現在はエンジニアチームのリーダーとしてWebアプリケーションのシステムを開発しています。キャリアとしては、SIerで1年、ベンチャー企業で3年、300人程度の企業で5年、現在は6000人規模の会社でエンジニアとして働いています。</p>

<p>前提として、ここで話すことはアプリケーション設計に関する話しです。データベースの関数自体の使用を否定しているわけではありません。データベース固有の関数を使う前に少し考えてみましょうという話しです。まずは、データベース固有の関数を使うリスクについて説明します。</p>

<h2 id="データベース固有の関数を使うリスク">データベース固有の関数を使うリスク</h2>

<p>データベースには固有の関数が用意されています。MySQLだとDATE_FORMATやNOW、SUMといったような関数です。これらを利用するのは便利ですが、安易な利用はおすすめしません。相応の理由がない限りは避けるべきです。理由は、データベース固有の関数を利用すると移植性が失われてしまうからです。</p>

<p>多くの人はデータベースを変更することはほとんどないだろうと考えます。本当にそうでしょうか。</p>

<p>例えば、開発環境ではSQLite、プロダクション環境ではMySQLを使うということは特段珍しいことではありません。<br />
トランザクション境界を分離できないようなインテグレーションテストを実行するときはどうでしょうか。</p>

<p>ユーザーの情報を取得するAPIのインテグレーションテストがあるとします。このテストをクリアするためには、事前にユーザーのデータをデータベースに登録しておくことが必要です。そうでなければユーザーのデータを検証することができません。<br />
テスト用のデータベースを共有で利用していた場合、一時的に作成されたテストデータが他のテストに影響するようになるでしょう。この問題は複数のテストが同時に実行されるようなCI環境になると顕著に現れます。解決策の1つとしてプロダクション環境と同じデータベースが含まれたイメージを作成するという手がありますが、複雑なイメージファイルを作成することは、なるべくなら避けたいところです。</p>

<h2 id="データベースはドアノブである">データベースはドアノブである</h2>

<p>ロバート・C・マーティンは著書「Clean Architecture」で、データベースはあくまで道具の1つであり、アーキテクチャの中心になるものではないと言っています。データベースは家のドアノブのようなものであり、アーキテクチャ的にはどうでもよいのです。ドアノブに家の設計を合わせることはしないでしょう。データベースがドアノブのようなものであれば、データベースに依存しないようにアプリケーションを実装するのは当然のことのように思えます。</p>

<p>RailsやSpringのような現在のフレームワークは、データベースを抽象化して扱えるような仕組みを提供しています。多くの場合、それはORMとして提供されており、利用するドライバーの設定を変更するだけでデータベースを変更することが可能です。</p>

<p>アプリケーション設計の側面から考えると、データベース固有の関数は避けるべきです。データベース固有の関数を利用する必要が場合は、基本的なCRUDで同じことができないかを検討しましょう。さもなければ、たった1つのデータベース固有の関数のせいでアプリケーションの移植性は失われてしまいます。</p>

<h2 id="原則としてアプリケーション側で対応する">原則としてアプリケーション側で対応する</h2>

<p>多くのアプリケーションは基本的なCRUDで構築することが可能です。少しの手間を省くためにデータベース固有の関数（例えばMySQLのREPLACE）を利用することはデメリットの方が大きくなる可能性があります。よく見られるアンチパターンはNOWの多様です。時刻はアプリケーション側で取得できます。アプリケーション側で対応できるものはアプリケーションの機能で対応しましょう。</p>

<h2 id="データベース固有の機能に頼った方がいい場合">データベース固有の機能に頼った方がいい場合</h2>

<p>データベース固有の機能に頼った方がいい場合も存在します。例えば、位置情報を扱うような場合です。位置情報を扱う場合、PostgreSQLの拡張であるPostGISを利用した方が少ない労力で実装することができるでしょう。このように明確なアドバンテージがある場合はデータベース固有の機能を利用しない理由はありません。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=syoyama-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4048930656&amp;linkId=bd16a1851920993a41c2031b32cd6769"></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[相談ではなく明確な基準を決めよう]]></title>
    <link href="http://48n.jp/blog/2018/12/17/decide-criteria-instead-of-consultation/"/>
    <updated>2018-12-17T12:56:02+09:00</updated>
    <id>http://48n.jp/blog/2018/12/17/decide-criteria-instead-of-consultation</id>
    <content type="html"><![CDATA[<p>こんにちは、しょーやんです。</p>

<p>私はエンジニアとして12年目で、現在はエンジニアチームのリーダーとしてWebアプリケーションのシステムを開発しています。キャリアとしては、SIerで1年、ベンチャー企業で3年、300人程度の企業で5年、現在は6000人規模の会社でエンジニアとして働いています。</p>

<p>度々「相談」という言葉が耳に入ってきます。この「相談」という言葉について耳にするたびに「基準を作ればいいのに」と思います。今回は「相談」と「基準」について考えていきたいと思います。</p>

<p>はじめに私の周りで使われている「相談」について説明します。「相談」とは次のような意味で使われています。</p>

<p>なんらかの判断を行わないといけないとき、その判断の観点を他者に伺う、もしくはその判断が正しいのどうかを他者に伺う行為。</p>

<h2 id="相談の問題点">相談の問題点</h2>

<p>私は「相談」という言葉があまり好きではありません。それは、相談が引き起こすふるまいには次の問題点があるからです。</p>

<ul>
  <li>スピードが遅い</li>
  <li>権力者の考えによって判断が異なる</li>
  <li>自身で意思決定ができない</li>
</ul>

<h3 id="スピードが遅い">スピードが遅い</h3>
<p>自分以外の誰かに相談するということは、次のようなタスクが必要になってきます。</p>

<ul>
  <li>忙しい上司を捕まえる</li>
  <li>関係者とMTGの時間を設定する</li>
  <li>説明する資料を用意する</li>
</ul>

<p>これらは本質的な仕事ではなく、仕事のスピードを遅くするだけのタスクにすぎません。</p>

<h3 id="権力者の考えによって判断が異なる">権力者の考えによって判断が異なる</h3>

<p>多くの場合、なんらかの権利・権力を持っている他者に対して相談を行うことになると思います（なんらかの権利・権力を持っているので権力者と呼ぶことにします）。例えば、ある権力者はAと言いますが、他の権力者に聞いてみるとBと言います。このように権力者によって回答が異なる場合、現場は混乱します。</p>

<h3 id="自身で意思決定ができない">自身で意思決定ができない</h3>
<p>自身で意思決定ができない環境でプロフェッショナルとして仕事を行うことは困難です。</p>

<h2 id="相談ではなく明確な基準を決める">相談ではなく明確な基準を決める</h2>
<p>このように相談にはいくつかの問題があります。相談の問題が見えてきたところで、「基準」について説明します。</p>

<p>「基準」とは何かの判断を行うときの指標となるものです。例えば、火事が起こったら119番に電話しますし、泥棒に入られた時は110番に電話しますよね。誰も迷うことはないと思います。これは、明確な基準が定められているからですね。</p>

<p>私は相談ではなく明確な基準を決めるのがよいと考えています。それは、次のようなメリットがあるからです。</p>

<h2 id="明確な基準を決めるメリット">明確な基準を決めるメリット</h2>

<h3 id="誰が判断しても同じ">誰が判断しても同じ</h3>
<p>明確な基準があれば上長であろうが、あなたであろうが、誰が判断しても同じです。基準の前で立場は関係ありません。</p>

<h3 id="その場で当事者が判断することができる">その場で当事者が判断することができる</h3>

<p>誰が判断しても同じ結果になるわけですから、いちいち誰かに相談する必要はありません。忙しい上司を捕まえたり、関係者とMTGの時間を設定したり、説明する資料を作成する必要もありません。今、この場であなたが決めればいいのです。</p>

<h2 id="相談と明確な基準の比較">相談と明確な基準の比較</h2>

<p>相談と明確な基準の比較をするために、2つの組織を例として考えてみます。</p>

<p>1つ目の組織では最終的な判断は上長に相談する必要があります。意思決定をするのに上長とのアポイントメントや説明資料が必要です。意思決定を行うためには1日程度かかるかもしれません。</p>

<p>2つ目の組織は明確な基準があり、その基準をもとに問題に直面している当人が判断を行います。明確な基準があるので、その問題に直面している人がその場で決めることができます。</p>

<p>この2つの組織を比較した場合、生産性が高いのは明らかに基準が明確な組織です。このように相談と基準のどちらの戦略をとるかで、生産的な面においての差がみてとれます。</p>

<h2 id="考えてみよう">考えてみよう</h2>

<ul>
  <li>あなたの周りではどのような時に相談が必要でしょうか？</li>
  <li>相談が必要なことを明確な基準に変えることはできないでしょうか？</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[手軽にスプラトゥーンをYouTubeで配信する]]></title>
    <link href="http://48n.jp/blog/2018/12/07/upload-youtube/"/>
    <updated>2018-12-07T16:47:03+09:00</updated>
    <id>http://48n.jp/blog/2018/12/07/upload-youtube</id>
    <content type="html"><![CDATA[<p>私はYouTubeやOPENREC.tvでよくスプラトゥーンの配信を視聴しているのですが、みているだけでなく自分もやってみたいと思ったのでYouTubeで配信をはじめてみました。この記事では、YouTubeでゲーム動画を配信する方法を紹介します。</p>

<h2 id="配信の手順">配信の手順</h2>

<p>配信の手順としては次の通りです。</p>

<ol>
  <li>キャプチャボードを使ってゲームの動画と音声を外付けの記録媒体に保存</li>
  <li>記録媒体に保存した動画をPCの編集ソフトを使って編集する（アフレコをしたり、不要な部分をカットしたり、音量の調整をする）</li>
  <li>編集した動画をYouTubeにアップロードする</li>
</ol>

<h2 id="配信に必要な機材">配信に必要な機材</h2>

<ul>
  <li>キャプチャボード
    <ul>
      <li>ゲームの動画と音声をキャプチャするのに必要です</li>
    </ul>
  </li>
  <li>記録媒体
    <ul>
      <li>USBメモリや外付けHDDなど。PCに保存する場合は不要です</li>
    </ul>
  </li>
  <li>PC
    <ul>
      <li>動画の編集に必要です。私はMacBook Air(メモリは4GB)を使っています</li>
    </ul>
  </li>
  <li>マイク
    <ul>
      <li>実況を録音するためのマイクです</li>
    </ul>
  </li>
</ul>

<h2 id="キャプチャボードを用意する">キャプチャボードを用意する</h2>

<p>ゲームの動画と音声を録画するにはキャプチャボードが必要です。キャプチャボードには様々な種類があり、どれを使ったらいいのかよくわからなくなると思います（私がそうでした）。私のおすすめのキャプチャボードは<a href="https://amzn.to/2rnVxeD" target="_blank">I-O DATA HDMI キャプチャーボード GV-HDREC</a>です。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=syoyama-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01NBKP6GC&amp;linkId=01b8e2236f4d964da8d3765408052cde"></iframe>

<p>このキャプチャボードは1万円程度と手頃な値段で操作方法も簡単です。最初の1台としておすすめできます。ただし、PCとの接続はできないので、リアルタイム配信には使えません。</p>

<h2 id="記録媒体を用意する">記録媒体を用意する</h2>

<p>私は32GBのUSBメモリを使っています。スマートフォンに接続できるタイプがおすすめです。録画した動画をスマートフォンで観たり、不要な動画を削除したりできます。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=syoyama-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07GNZ2RYG&amp;linkId=23d57073d72c0301fc32418069273158"></iframe>

<p>32GBで2時間程度の録画ができます（記録形式によって時間は変わります）。32GBだとこまめにデータを消す必要があるので、もう少し大きな容量がよいかもしれません。</p>

<h2 id="動画の編集">動画の編集</h2>

<p>画像の編集はiMovieを使っています。簡単な編集であればiMovieで十分です。YouTubeへのアップロード機能もついており、この機能を使ってYouTubeにアップロードしています。iMovieの操作方法についてはドキュメントをご覧ください。</p>

<ul>
  <li><a href="https://help.apple.com/imovie/mac/10.1/?lang=ja">iMovieヘルプ</a></li>
</ul>

<p>アフレコに使うマイクはアップルの純正イヤホンのマイクを使ってます。</p>

<h2 id="おわりに">おわりに</h2>

<p>このような感じで、特に難しいことをせずに動画配信ができてしまいます。今後もスプラトゥーンの動画を配信していくので、ぜひチャンネル登録お願いします！</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/MefVKKI8l-4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[シェルスクリプトで別プロセスの終了ステータスを取得する]]></title>
    <link href="http://48n.jp/blog/2018/11/29/check-other-process/"/>
    <updated>2018-11-29T14:55:51+09:00</updated>
    <id>http://48n.jp/blog/2018/11/29/check-other-process</id>
    <content type="html"><![CDATA[<p>シェルスクリプトで別プロセスの終了ステータスを取得するTipを紹介します。</p>

<h3 id="ユースケース">ユースケース</h3>

<p>時間のかかる処理などを並列で行い、その実行結果(終了ステータス)を取得したい。</p>

<h3 id="サンプルコード">サンプルコード</h3>

<p>Bashのサンプルコードです。スクリプトに解説を記入しています。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#!/bin/bash
</span><span class="line">
</span><span class="line">command1() {
</span><span class="line">  echo "executing commnad1"
</span><span class="line">  sleep 3
</span><span class="line">}
</span><span class="line">
</span><span class="line">command2() {
</span><span class="line">  echo "executing commnad2"
</span><span class="line">  sleep 3
</span><span class="line">  # エラーとして終了させる
</span><span class="line">  exit 1
</span><span class="line">}
</span><span class="line">
</span><span class="line">echo "start"
</span><span class="line">
</span><span class="line"># バックグラウンドで実行
</span><span class="line">command1 &amp;
</span><span class="line"># $!で直前に実行されたコマンドのプロセスIDを取得し、変数に保存している
</span><span class="line">pid1=$!
</span><span class="line">
</span><span class="line">command2 &amp;
</span><span class="line">pid2=$!
</span><span class="line">
</span><span class="line"># waitは指定されたプロセスIDの処理が終わるまで待つ
</span><span class="line">wait $pid1
</span><span class="line">
</span><span class="line"># $?でwaitで指定しているプロセスの終了ステータスを取得することができる
</span><span class="line">if [ $? != 0 ]; then
</span><span class="line">  echo "command1 error"
</span><span class="line">else
</span><span class="line">  echo "commnad1 success"
</span><span class="line">fi
</span><span class="line">
</span><span class="line">wait $pid2
</span><span class="line">if [ $? != 0 ]; then
</span><span class="line">  echo "command2 error"
</span><span class="line">else
</span><span class="line">  echo "command2 success"
</span><span class="line">fi
</span><span class="line">
</span><span class="line">echo "end"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>gistにもコードをアップしています。</p>

<ul>
  <li><a href="https://gist.github.com/shoyan/6f45b6a005fd34a44264fa1dcb4d56e6" target="_blank">wait_process.sh</a></li>
</ul>

<p>shellの学習は次の書籍を1冊やっておけば大丈夫です。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=syoyama-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4797321946&amp;linkId=98e93361f2c0071d8749d5526b9a8b64"></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyでのWebアプリケーション開発はSinatraから入りRailsに行く]]></title>
    <link href="http://48n.jp/blog/2018/11/20/sinatra-way/"/>
    <updated>2018-11-20T16:04:35+09:00</updated>
    <id>http://48n.jp/blog/2018/11/20/sinatra-way</id>
    <content type="html"><![CDATA[<p>私はソフトウェアエンジニアなのですが、プログラミング講師としても生徒さんにRubyを教えています。RubyでWebアプリケーションを作る場合、まず候補になるフレームワークはRuby on Railsですが、Railsは初学者には難しいと思います。プログラミング初学者にRailsを教えるということは、車の教習所でいきなりスポーツカーを運転させるようなものです。入門者には入門者に適した車があるのと同様にプログラミングにもそのようなものがあります。</p>

<p>では、最初は何がいいかというと、Sinatraがよいと思います。そういうわけで、Sinatraを使ったWebアプリケーションのサンプルを探してみたのですが、よいものが見つかりませんでした。ないなら作ってしまえというわけで作りました。</p>

<ul>
  <li><a href="https://github.com/shoyan/sinatra-app" target="_blank">https://github.com/shoyan/sinatra-app</a></li>
</ul>

<p>今回作成したのはシンプルなメモアプリケーションでフォームに入力した値をメモとして保存することができます。作成したメモの一覧表示、詳細表示、編集機能、削除機能を実装しています。基本的なCRUD操作を備えており、RESTについても学ぶことができるようになっています。</p>

<p>わかりやすいようにディレクトリをわけています。initialディレクトリは最初からフルスクラッチで作る場合のディレクトリです。step1はメモの作成とメモの表示機能を実装しています。step2はstep1の機能にメモの削除とメモの編集機能を追加しています。</p>

<p>実装にあたっては、できるだけRubyの標準ライブラリを使うようにしました。理由は長い年月において最も安定的に使えるのはRubyの標準ライブラリであることからです。サードパーティのライブラリは便利ですが、Rubyのバージョンアップによる互換性の問題などを含んでいます。将来的にも安定して動作させることを考慮すると標準ライブラリで実現できる機能であれば標準ライブラリを選択するのは良い選択肢だと思います。</p>

<p>また、データベース（正確にはRDBMS）はややこしいので使っていません。もう少し丁寧に説明すると、今回のアプリケーションはプログラミング初学者の学習に適しているアプリケーションをシンプルな実装（環境も含めて）で作るということを目的として作ったので、その点でRDBMSは適していません。では、どうやってメモを永続的に保持するのかというと、ファイルとして保持しています。この機能の実装には、Rubyの標準ライブラリであるpstoreを利用しました。pstoreとはオブジェクトをそのままファイルとして保存するライブラリです。メモアプリケーションの機能を実現するなら、これで十分なわけです。</p>

<ul>
  <li><a href="https://docs.ruby-lang.org/ja/latest/library/pstore.html" target="_blank">https://docs.ruby-lang.org/ja/latest/library/pstore.html</a></li>
</ul>

<p>Webアプリケーションはリクエストとパラメーター（必要であれば）をアプリケーションサーバーに送信し、ルーティング設定に従ってそのリクエストを処理します。そして、レスポンスを返します。この流れを理解することがはじめの1歩です。この流れが理解できていない状態でRailsを使うのは早すぎるように思いますし、データベースの用意やらマイグレーションやらは確実に最初の壁となってプログラミング初学者に立ちはだかるでしょう。</p>

<p>そのようなややこしいことは置いておいて、まずは小さな動くアプリケーションを作りましょう。Sinatraであればターミナルに数コマンドを打つだけでアプリケーションを起動できます。自分で全てのコードを書いても数時間程度で書くことができます。コードのほとんどは標準のRubyのライブラリを使用しているため、とてもシンプルです。</p>

<p>ここまではRailsについて散々けなしていますが、誤解のないように断っておくと、本格的なWebアプリケーションを作るのであればRailsがいいです。習得に数ヶ月はかかるでしょうが、多くの機能を少ないコードで実装できてしまうRailsの生産性の高さは、それだけの時間をかける価値があります。しかし、プログラミング初学者がいきなりRailsから入るのは難しいのではと思います。RubyでのWebアプリケーション開発は、まずはSinatraから入りそこからRailsに行くのがよいというのが私の考えです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[好きなことをひたすら追いかければよい]]></title>
    <link href="http://48n.jp/blog/2018/10/15/not-goal-2/"/>
    <updated>2018-10-15T16:39:50+09:00</updated>
    <id>http://48n.jp/blog/2018/10/15/not-goal-2</id>
    <content type="html"><![CDATA[<p>この記事は前回の続きです。前回の記事は「<a href="http://48n.jp/blog/2018/10/12/not-goal/">計画はいらない</a>」です。</p>

<p>「好きなことをひたすら追いかければよい」理由は、そのほうがうまくいく可能性が高いからです。</p>

<p>世の中には好きなことを極めることで、それが結果的に仕事になっている人がいます。例えばYoutuberのHIKAKINさんはその1人です。HIKAKINさんはヒューマンビートボックスを極め、それを自身の動画投稿に取り入れることにより一躍人気者になりました。</p>

<p>人気が出たのは誰もそのようなことをやっておらず、新鮮だったということがあると思います。ヒューマンビートボックスにハマり、動画投稿にハマり、自身の面白いを追求した結果、トップYoutuberになることができたのです。</p>

<p>このように世の中にないものには、計画を立ててそれを遂行するというやり方では到底到達できません。道はただ1つ。ハマってハマって追求するということです。</p>

<p>自身の面白いはとてつもなく大きな可能性を秘めています。今は何も可能性がないように思えるかもしれません。しかし、その面白いにハマり追求することで当初は見えなかった道が見えてくるはずです。</p>

<p>これは山登りに似ています。山の麓からは山しか見えません。山を登っていくうちにどんどん視界が開けて行きます。上から見ると、今まで見えなかった道が見えることでしょう。遠いと思っていた頂上も実際に歩いてみると、案外登頂できるものです。</p>

<p>実際にやってみると想像していたものと違うということもあることでしょう。その場合はさっとさとやめればいいのです。思い立ったらすぐやって、さっさと飽きて次に行く。飽きるということにネガティブなイメージを抱く人もいるでしょうが、飽きるということは経験し、そこからなにかしら学んだということです。どんどん飽きて、次の新しい経験を積めばよいのです。そのほうがたくさん学ぶことができます。飽きた数こそがあなたが成長した証です。</p>

<p>このように計画を立てずに面白そうなことはどんどんやる。飽きたらまた別の面白いことをやる。そうやって経験を積み、学んでいくことで、結果的にその経験が組み合わさって面白いことができるようになると思うのです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[計画はいらない]]></title>
    <link href="http://48n.jp/blog/2018/10/12/not-goal/"/>
    <updated>2018-10-12T16:35:56+09:00</updated>
    <id>http://48n.jp/blog/2018/10/12/not-goal</id>
    <content type="html"><![CDATA[<p>2018年もあと3ヶ月で終わろうとしています。少し早いですが、2018年を振り返ってみると、良いことも良くないことも含めて様々なことがありました。結果的に近年で最も濃い1年になりました。</p>

<p>私自身は今年を特別な1年にしようなどとは微塵も考えていませんでした。また、何かを達成しようと詳細な計画をたてたりもしていません。しかし、結果的には今まで経験したことのないことをいくつか経験することができました。</p>

<p>ここで言いたいことは「計画していないけどうまくいった」ということです。</p>

<p>私はこのような経験を積むにつれて、計画を立てるのはあまり意味のないことなのではないか、と考えるようになりました。明確な計画を立て地道に進むというのは一見素晴らしいように思えます。しかし、実際は計画通りにいかないことがほとんどです。もし計画通りにいけば、みんな子供の頃に夢見たスポーツ選手や芸能人になっていることでしょう。</p>

<p>私たちは経験則で人生とは計画通りにいかないことを知っています。しかし、計画を立てようとしがちです。そして、年の暮れには「計画が達成できなかった。自分は無能な人間だ」と自分を蔑みます。そんなことに何の価値があるのでしょうか。ほとんどが失敗する計画をなぜ立てるのでしょうか。</p>

<p>いい加減、そのようなことはやめたほうがいいのではないかと思うわけです。私は「好きなことをひたすら追いかければよい」と思います。</p>

<p>理由についてはまた書いていきたいと思います。</p>

<p><a href="http://48n.jp/blog/2018/10/15/not-goal-2/">» 好きなことをひたすら追いかければよい</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developers Summit 2018 FUKUOKAに登壇します]]></title>
    <link href="http://48n.jp/blog/2018/09/05/before-developers-summit-2018-fukuoka/"/>
    <updated>2018-09-05T19:40:36+09:00</updated>
    <id>http://48n.jp/blog/2018/09/05/before-developers-summit-2018-fukuoka</id>
    <content type="html"><![CDATA[<p>2018年9月7日にアクロス福岡で開催される <a href="https://event.shoeisha.jp/devsumi/20180906" target="_blank">Developers Summit 2018 FUKUOKA</a>(デブサミ福岡)に登壇します。<br />
明日はどのような話しから入ろうかがまだ決まっていなくて、どうしようかと考えています。</p>

<p>発表内容は0からはじまった開発チームが、どのようにチームとしてまとまっていき、アプリケーション開発を成功させることができたかという事例の紹介となります。</p>
<ul>
  <li><a href="https://event.shoeisha.jp/devsumi/20180906/session/1775/" target="_blank">Y!Jカード天神チームの立ち上げからこれまで</a></li>
</ul>

<p>デブサミ福岡のような大きなイベントに登壇するのは今回が初めてなので、うまくできるか不安ではありますが、精一杯やりたいと思っています。もし、当日会場に来られる方がいれば是非、お声がけください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最短でビデオチャットを開発したい人へ]]></title>
    <link href="http://48n.jp/blog/2018/08/07/started-video-chat/"/>
    <updated>2018-08-07T14:23:15+09:00</updated>
    <id>http://48n.jp/blog/2018/08/07/started-video-chat</id>
    <content type="html"><![CDATA[<p>ビデオチャットを最短で作りたいと考えている人への備忘録です。次の手順に沿って開発すると4時間程度でビデオチャットを開発できます。</p>

<ol>
  <li><a href="#1-webrtcの概要を把握する">WebRTCの概要を把握する</a></li>
  <li><a href="#2-webrtcのコードを動かしてみる">WebRTCのコードを動かしてみる</a></li>
  <li><a href="#3-webrtcの開発を支援するサービスを利用する">WebRTCの開発を支援するサービスを利用する</a></li>
</ol>

<h2 id="1-webrtcの概要を把握する">1. WebRTCの概要を把握する</h2>

<p>まずはWebRTCについての概要を把握しておくと、実装するときの理解が深まります。まずは、次の記事を読んでください。</p>

<ul>
  <li><a href="https://gist.github.com/voluntas/67e5a26915751226fdcf" target="_blank">WebRTC コトハジメ</a></li>
</ul>

<p>同じタイトルですが、Qiitaのこの記事もわかりやすいです。</p>

<ul>
  <li><a href="https://qiita.com/yusuke84/items/286f569d110daede721e" target="_blank">WebRTC コトハジメ</a></li>
</ul>

<h2 id="2-webrtcのコードを動かしてみる">2. WebRTCのコードを動かしてみる</h2>

<p>上記の記事を読んだら、早速コードを動かしてみましょう。コードを実際に動かしてみることで、着実にWebRTCの概念を理解していくことができます。</p>

<p>次の記事で簡単にPCのカメラの映像をブラウザに表示できることが体感してください。</p>

<ul>
  <li><a href="https://html5experts.jp/mganeko/19728/" target="_blank">カメラを使ってみよう ーWebRTC入門2016</a></li>
</ul>

<p>次の記事でシグナリングの流れを掴みましょう。</p>

<ul>
  <li><a href="https://html5experts.jp/mganeko/19814/" target="_blank">手動でWebRTCの通信をつなげよう ーWebRTC入門2016</a></li>
</ul>

<h2 id="3-webrtcの開発を支援するサービスを利用する">3. WebRTCの開発を支援するサービスを利用する</h2>

<p>本格的なビデオチャットを開発するのはなかなか大変です。その開発を楽にしてくれるサービスが世の中に存在します。私がおすすめするのはSkyWayというサービスです。このサービスを利用することでNAT越えなどの仕組みを自分で実装せずにすみます。日本語ドキュメントが整備されており、サービス自体も無料で試すことができます。</p>

<ul>
  <li><a href="https://webrtc.ecl.ntt.com/" target="_blank">SkyWay</a></li>
</ul>

<p>SkyWayを利用するにあたっては、次のスライドが参考になります。</p>

<ul>
  <li><a href="https://www.slideshare.net/iwashi86/skyway-how-to-use-skyway-webrtc" target="_blank">SkyWayを使いこなすために - How to use SkyWay (WebRTC)</a></li>
</ul>

<p>余談ですが、WebRTCのライブラリであるPeerJSはメンテされてないので使わない方がよいです。</p>
<ul>
  <li><a href="https://medium.com/@Tukimikage/peerjs%E3%82%92%E4%BB%8A%E5%BE%8C%E3%82%82%E4%BD%BF%E3%81%84%E7%B6%9A%E3%81%91%E3%82%8B%E3%81%AE%E3%81%AF%E5%8D%B1%E9%99%BA-8c3cf68d56a0" target="_blank">PeerJSを今後も使い続けるのは危険</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[デュアルスイーパーカスタムのフジツボスポーツクラブの立ち回り（ガチエリア編）]]></title>
    <link href="http://48n.jp/blog/2018/07/10/how-to-winning-method-dual-sweeper-custome-in-the-fujitsubo/"/>
    <updated>2018-07-10T09:39:55+09:00</updated>
    <id>http://48n.jp/blog/2018/07/10/how-to-winning-method-dual-sweeper-custome-in-the-fujitsubo</id>
    <content type="html"><![CDATA[<p>スプラトゥーン2のデュアルスイーパーカスタムのフジツボスポーツクラブの立ち回り（ガチエリア編）を解説します。</p>

<p>フジツボスポーツクラブはデュアルスイーパーのような射程の長い武器は戦いづらいステージです。というのも、高低差が多く平らなスペースが少ないからです。塗り状況が悪い中で無理して中央のエリアに出て行ってもすぐに倒されてしまいます。</p>

<h2 id="デュアルスイーパーカスタムのフジツボスポーツクラブの立ち回りガチエリア編">デュアルスイーパーカスタムのフジツボスポーツクラブの立ち回り（ガチエリア編）</h2>

<p>デュアルスイーパーの強ポジは自陣左側のスポンジです。スポンジを膨らませて、そこから中央高台にスプラッシュボムを投げます。このスプラッシュボムがかなり効果的です。というのも、エリアのルール上、中央高台には多くのイカが集まるので、スプラッシュボムが当たりやすいのです。また、自陣左側に敵が侵入してくることは少ないのでデスを抑えることができます。</p>

<p>数的優位がとれるまではスポンジの上からスプラッシュボムを投げる。数的優位が取れたら、中央に出て行ってエリアを押さえる。この動きができれば勝てます。</p>

<h2 id="オススメのギア">オススメのギア</h2>

<p>オススメのギアはサブ性能アップとサブインク効率アップです。サブ性能アップをつけると、スプラッシュボムの飛距離が伸びるため、より遠くの敵までボムが届くようになります。また、サブインク効率アップでより多くのボムを投げることができます。</p>

<p>空いたスペースには、インク回復アップとスペシャル増加量アップを積んでいます。これは、スプラッシュボムを投げる回数を増やすためとスペシャルのアメフラシの回数をあげるためです。アメフラシは相手の前線を強制的に下げさせることができるため、エリアの打開時にうってつけのスペシャルです。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1つのMTGが午前中をダメにする]]></title>
    <link href="http://48n.jp/blog/2018/07/05/why-the-morning-is-wasted-on-one-meeting/"/>
    <updated>2018-07-05T16:34:33+09:00</updated>
    <id>http://48n.jp/blog/2018/07/05/why-the-morning-is-wasted-on-one-meeting</id>
    <content type="html"><![CDATA[<blockquote>
  <p>基本的に、予定があることがわかっている時は、何も仕事を終わらせられません。時計を見て｢1時間後に会議があるから、この大事な仕事はまだやらないほうがいいな｣と思ったり、1時間を20分くらいに感じるせいか、一番小さな仕事ですら無意識のうちに先延ばしにします。</p>
</blockquote>

<p><a href="https://www.lifehacker.jp/2018/07/overscheduling-your-days-can-wreck-your-productivity.html" target="_blank">生産的な1日は｢予定を入れすぎない｣ことからはじまる</a></p>

<p>30分後にMTGが予定されているだけで次の仕事をやる気がしなくなります。中途半端にやるくらいなら、MTGが終わってからやろうと思うからです。そして、MTGが終わると何だか疲れてしまい、少し休憩してからやろうと思います。さて、休憩もしたので仕事に取り掛かったのもつかの間、昼休みになります。このような感じで午前中に1つMTGが入っただけで、ほとんど生産的なことができずに午前中が終わってしまいます。たった30分のMTGが午前中をダメにしてしまいます。</p>

<p>このMTGのように、それ自身は些細な時間でも与える影響は大きいものです。その影響についても考える必要があります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[サッカー日本代表がベスト16にしかなれない理由]]></title>
    <link href="http://48n.jp/blog/2018/07/03/soccer-2018/"/>
    <updated>2018-07-03T11:49:13+09:00</updated>
    <id>http://48n.jp/blog/2018/07/03/soccer-2018</id>
    <content type="html"><![CDATA[<p>サッカー日本代表がW杯の決勝トーナメントでベルギーに敗れ、ベスト16になりました。日本のメディアは大いに日本の選手を称えています。この世論の雰囲気こそがサッカー日本代表がベスト16にしかなれない理由だと思います。</p>

<p>もちろん、予選を突破してベスト16に入ったのはすごいことです。しかし、W杯で優勝するようなチームにとってベスト16に入るのは当たり前のことなのです。優勝候補のブラジルが決勝トーナメントの1回戦で負けたらブラジルの世論はなんと言うでしょうか。おそらく、酷いバッシングをするはずです。</p>

<p>この空気がブラジル代表の選手たちの潜在意識に強く影響をしているわけです。ブラジルの選手たちはベスト16で勝つのは当たり前。絶対に負けられないと100%信じているはずです。</p>

<p>対して、日本代表の選手たちはベスト16になったことで少なからず何処かに満足感があると思います。これは選手たちのせいではなく、日本の世論が作り出している雰囲気のせいです。</p>

<p>開催国のほとんどが予選を突破して決勝トーナメントに進出するのも同じ理由です。自国開催のチームは絶対に予選を突破しないといけないと潜在意識に強く刷り込まれているわけです。</p>

<p>日本の空気感こそがサッカー日本代表の最大の壁だと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[明日は台風なのでリモートワークします]]></title>
    <link href="http://48n.jp/blog/2018/07/02/typhoon-tomorrow/"/>
    <updated>2018-07-02T17:23:02+09:00</updated>
    <id>http://48n.jp/blog/2018/07/02/typhoon-tomorrow</id>
    <content type="html"><![CDATA[<p>明日は台風なのでリモートワークをします。リモートワーク制度があるので都合のいい時間に自分の働きたい場所で働くことができます。リモートワーク制度のいいところは、「台風がそれたから出社になった」なんてことがないことです。最初からリモートワークをすると決まっていれば朝はゆっくりと過ごすことができます。</p>

<p>朝から会社の判断を待ってどうするかが決まるなんてわずらわしくないですか。出社を判断する方も大変でしょう。会社が判断するのではなくて個々人で判断すればいいのです。会社で働いたほうが都合がいい人は会社で働けばいいですし、会社以外で働いたほうが都合がいい人はリモートワークをすればいいだけです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SetterとBuilderの使いわけ]]></title>
    <link href="http://48n.jp/blog/2018/06/29/use-of-setter-or-builder/"/>
    <updated>2018-06-29T17:39:49+09:00</updated>
    <id>http://48n.jp/blog/2018/06/29/use-of-setter-or-builder</id>
    <content type="html"><![CDATA[<p>先日、「SetterとBuilderはどのように使いわければいいのか？」という質問を受けました。なかなかよい質問ですね。Builderを使うとクラスのインスタンスを柔軟に作ることができます。Builderを使ったサンプルコードです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
</span><span class="line">        <span class="o">.</span><span class="na">lastName</span><span class="o">(</span><span class="s">&quot;山田&quot;</span><span class="o">)</span>
</span><span class="line">        <span class="o">.</span><span class="na">firstName</span><span class="o">(</span><span class="s">&quot;太郎&quot;</span><span class="o">)</span>
</span><span class="line">        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Builderを実装したUserクラスのサンプルコードです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">User</span><span class="o">(</span><span class="n">String</span> <span class="n">lastName</span><span class="o">,</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">UserBuilder</span> <span class="nf">builder</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="k">new</span> <span class="nf">UserBuilder</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">UserBuilder</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">private</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class="line">        <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">UserBuilder</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="kd">public</span> <span class="n">UserBuilder</span> <span class="nf">lastName</span><span class="o">(</span><span class="n">String</span> <span class="n">lastName</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class="line">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="kd">public</span> <span class="n">UserBuilder</span> <span class="nf">firstName</span><span class="o">(</span><span class="n">String</span> <span class="n">firstName</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class="line">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="kd">public</span> <span class="n">User</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">lastName</span><span class="o">,</span> <span class="n">firstName</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Setterを使うと次のようになります(実装は省略)。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">User</span><span class="o">();</span>
</span><span class="line"><span class="n">user</span><span class="o">.</span><span class="na">setLastName</span><span class="o">(</span><span class="s">&quot;山田&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">user</span><span class="o">.</span><span class="na">setFirstName</span><span class="o">(</span><span class="s">&quot;太郎&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Setterの問題点として、インスタンスの状態を変更してしまうことがあります。イミュータブルな実装にする場合、原則としてコンストラクタで値は設定するべきでSetterで変更するべきではありません。</p>

<p>では、Setterではなくコンストラクタで設定するようにしましょう。引数が少ないうちは問題がないのですが、次の例のように引数の数が増えてしまうとコードが煩雑になってしまいます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="c1">// 姓、名、年齢、血液型、国が引数のコンストラクタの例</span>
</span><span class="line"><span class="c1">// 年齢と血液型は不明だが、nullを指定する必要がある</span>
</span><span class="line"><span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="s">&quot;山田&quot;</span><span class="o">,</span> <span class="s">&quot;太郎&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="s">&quot;日本&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>そこで、Builderを使うメリットが出てきます。Builderを使えば柔軟にパラメーターの設定が行えるようになります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
</span><span class="line">        <span class="o">.</span><span class="na">lastName</span><span class="o">(</span><span class="s">&quot;山田&quot;</span><span class="o">)</span>
</span><span class="line">        <span class="o">.</span><span class="na">firstName</span><span class="o">(</span><span class="s">&quot;太郎&quot;</span><span class="o">)</span>
</span><span class="line">        <span class="o">.</span><span class="na">country</span><span class="o">(</span><span class="s">&quot;日本&quot;</span><span class="o">)</span>
</span><span class="line">        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>SetterもBuilderもやりたいことはオブジェクトにパラメーターをセットすることです。Setterを使うとオブジェクトの状態を変更してしまうことになります。イミュータブルな実装かつ柔軟にパラメーターを設定したい場合はBuilderを使いましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[そろそろlombokから卒業しようと考えています]]></title>
    <link href="http://48n.jp/blog/2018/06/29/graduate-from-lombok/"/>
    <updated>2018-06-29T15:26:49+09:00</updated>
    <id>http://48n.jp/blog/2018/06/29/graduate-from-lombok</id>
    <content type="html"><![CDATA[<p>便利な<a href="https://projectlombok.org/" target="_blank">lombok</a>ですが、そろそろオワコンな感じがしています。理由はJavaのアップデートに追従することが困難になってきているからです。詳しくは<a href="https://qiita.com/tmurakam99/items/b5ffe7f18bc06577f619" target="_blank">Lombok の Java9以降対応</a>の記事に書いてあります。実際、Java9対応も遅かったですね。lombokを使い続けると、Javaのアップデートに追従していけなくなる未来が想像できます。</p>

<p>Spring Bootも2系からはlombokは使っていませんね。</p>

<p>lombokは便利ですが、別に無くてもなんとかなるライブラリなので、あえてこれから使う選択をする必要はないと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[リモートワークは効率が悪いはウソ]]></title>
    <link href="http://48n.jp/blog/2018/06/28/about-remote-work/"/>
    <updated>2018-06-28T14:42:53+09:00</updated>
    <id>http://48n.jp/blog/2018/06/28/about-remote-work</id>
    <content type="html"><![CDATA[<p>ここ最近は週に1回ほどリモートワークで働いています。プログラミングであればリモートワークで問題ないです。</p>

<p>リモートワークの利点として会議に出なくていいことがあります。会社にいると何かと会議に招集されて時間や集中力が奪われてしまいますが、リモートワークであればその心配はありません。本当に出る必要がある会議であればリモートで参加すればいいですし、多くの場合は対面で話さずともドキュメントベースのコミュニケーションで事足ります。</p>

<p>ほかにも通勤時間が不要になることで1日に余裕ができるメリットがあります。私は往復で通勤時間に2時間が必要です。リモートワークにすればこの2時間が自由に使えるようになります。通勤時間がない分、早めに仕事を切り上げてその後の時間は子供と遊んだりできます。</p>

<p>リモートワークだと集中できない、生産性が下がるという意見がありますが、実際にやってみるとそんなデメリットはありませんでした。オフィスより家の方が集中できます。なぜなら、集中するには静かな場所が必要だからです。テレビがついているような騒がしい場所で集中することは難しいのです。オフィスはテレビがついている部屋と大して変わらないと思います。</p>

<p>リモートワーク導入で生産性が下がるのではないかという意見もありますが、そんなことはありません。通勤時間がなくなるうえ、集中できる環境であれば生産性が上がるのは当然でしょう。コミュニケーションが必要な時はSlackなどのツールを利用すればよいです。ただし、100％リモートワークとなるとコミュニケーションの問題が出てくるであろうというのはわかります。ですので、オフィスワークとリモートワークのハイブリットがバランスがよいのではないでしょうか。</p>

<p>頑張って残業するよりリモートワークを取り入れましょう。そのほうが生産性があがり社員の満足度もあがりますよ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[これからの技術書の書き方]]></title>
    <link href="http://48n.jp/blog/2018/06/27/how-to-write-future-tec-document/"/>
    <updated>2018-06-27T13:52:30+09:00</updated>
    <id>http://48n.jp/blog/2018/06/27/how-to-write-future-tec-document</id>
    <content type="html"><![CDATA[<p>技術書は少しずつ書いて有料で公開する。これが、これからの技術書の書き方だと思います。具体的な例としては「<a href="https://note.mu/makingx/m/m2dc6f318899c" target="_blank">はじめるSpring Boot 2</a>」があります。</p>

<p><a href="https://twitter.com/making" target="_blank">@Making</a>さんの記事「<a href="https://note.mu/makingx/n/n5d1d61f0b214" target="_blank">紙媒体の技術書を書きたくないです…</a>」に書かれているように技術書を書くには膨大な時間が必要です。それを全て書き終えて出版するには相当の時間がかかります。ITの技術はどんどん進歩しているので、出版される頃には古くなってしまう場合もあります。紙媒体だと内容が間違っていても修正できません。また、出版の期日に間に合わせるために、著者に非常に負担がかかります。今の出版のやり方はデメリットが多すぎるんですよね。</p>

<p>だいたい技術書の内容って全ては必要ない場合がほとんどです。一部だけ読みたいのに全てを購入するのは無駄なのです。これからは<a href="https://note.mu/" target="_blank">note</a>などのサービスを使って有料で出版されるケースが増えてくると思います。そうすれば、自分のペースで書けるし取り分も増えます。読むほうも必要なところだけ買えばいいので無駄がありませんね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ラピッドブラスターエリートデコのガチヤグラ必勝法]]></title>
    <link href="http://48n.jp/blog/2018/06/21/victory-gachiyagura/"/>
    <updated>2018-06-21T17:14:05+09:00</updated>
    <id>http://48n.jp/blog/2018/06/21/victory-gachiyagura</id>
    <content type="html"><![CDATA[<p>スプラトゥーン2のガチヤグラで勝つ方法を紹介します。私はこのやり方でS＋までいきました。ガチヤグラでなかなか勝てないイカの諸君の参考になればと思います。</p>

<h2 id="ラピッドブラスターエリートデコを使う">ラピッドブラスターエリートデコを使う</h2>
<p>ガチヤグラで私がおすすめする武器はラピッドブラスターエリートデコです。圧倒的な射程で一方的にヤグラ上の敵を倒すことができます。また、防衛拠点にいる敵をどかすこともできます。</p>

<p>ガチヤグラはブラスター系の武器が強いルールです。なぜかというと、ヤグラ上の敵はブラスターの爆風で簡単に倒すことができます。これがシューターになるとなかなかヤグラ上の敵に当てるのが難しいです。</p>

<h2 id="ラピッドブラスターエリートデコの立ち回り">ラピッドブラスターエリートデコの立ち回り</h2>
<p>ラピッドブラスターエリートデコは敵と確実に距離をとってラピッドブラスターエリートデコの弾だけ当たる距離で戦うことが基本的な立ち回りです。このような立ち回りをする理由は、射程が長い分近づかれると弾を当てるのが難しく、簡単に倒されてしまうからです。</p>

<h3 id="初動の立ち回り">初動の立ち回り</h3>
<p>初動は自陣をしっかり塗ります。インクを塗っておかないと相手との距離がとれなくなるため、簡単に倒されてしまいます。しっかりインクを塗っておきましょう。初動は自陣にインクを塗りつつ、戦況がどのように動くかを把握します。</p>

<h3 id="人数有利の場合の立ち回り">人数有利の場合の立ち回り</h3>
<p>こちらのチームが人数有利でヤグラ周りに敵がいなければ率先してヤグラに乗ってよいでしょう。ヤグラ上からヤグラに向かってくる敵や防衛拠点にいる敵を攻撃します。</p>

<h3 id="人数不利の場合の立ち回り">人数不利の場合の立ち回り</h3>
<p>人数不利の場合は、安全なところまで下がって味方が前線に復帰してくるのを待ちます。孤立した場合はリスポーンに戻ってしまってもよいです。敵がヤグラに乗っている場合は、安全なところからヤグラ上の敵を攻撃してヤグラの進行を妨害します。</p>

<h2 id="おすすめのギア">おすすめのギア</h2>
<p>おすすめするギアはイカ速、メインインク効率アップです。イカ速は敵との距離を取るために積んでいます。メインインク効率アップは、メイン効率がよくないため積んでいます。私はイカ速1.0、メインインク効率2.0を積んでいます。デスが少なく抑えれる場合はメインインク効率を1.0にして、ペナルティや逆境強化を積んでもよいでしょう。</p>

<h2 id="まとめ">まとめ</h2>
<p>ポイントは敵と距離をとって戦うこと、人数有利の時、人数不利の時の立ち回りを意識することです。あとは実践あるのみです。自然とこの立ち回りができるくらい実践を繰り返せば必ずウデマエはあがります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スプラトゥーン2が楽しすぎる]]></title>
    <link href="http://48n.jp/blog/2018/06/12/awesome-splatoon2/"/>
    <updated>2018-06-12T18:28:53+09:00</updated>
    <id>http://48n.jp/blog/2018/06/12/awesome-splatoon2</id>
    <content type="html"><![CDATA[<p>スプラトゥーン2が楽しすぎます。社会人になってからゲームはあまりしなくなってゲームは卒業かと思っていましたが、やばいゲームと出会ってしまいました。時間を見つけてはスプラトゥーン2をやっています。ハマりすぎて妻には愛想をつかされていますが、まあそれでもいいのです。</p>

<p>スプラトゥーン2はオンラインサバゲーのようなゲームです。味方と敵の2チームにわかれて自分のチームのインクを多く塗ったほうが勝ちです。幼稚園児でもできるシンプルなゲームです。そんなシンプルなゲームですが、プロゲーマーも多くいて、プロチームもあります。6月11日より世界大会が開催されて、第3回スプラトゥーン甲子園で優勝したGGBoyZが日本代表として出場します。</p>

<p>幼稚園児からプロゲーマーまで楽しめるゲームってなかなかないのではないでしょうか。クリエイターの人には脱帽ですね。素晴らしいゲームです。</p>

<p>ちなみに私のウデマエはS〜Aあたりをウロウロしています。あと100時間くらいやればS+はいけるんじゃないでしょうか。武器はプラコラやラピブラエリート、デュアルスイーパーカスタムなど中長距離武器をよく使ってます。</p>

<p>しばらくはやり続けるでしょうから、今後もスプラトゥーン2について書いていきたいと思います。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=syoyama-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B072J2J26T&amp;linkId=b397d3e0d93479554f7ad256a1279272"></iframe>

]]></content>
  </entry>
  
</feed>
