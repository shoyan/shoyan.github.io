<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SHOYAN BLOG]]></title>
  <link href="http://48n.jp/atom.xml" rel="self"/>
  <link href="http://48n.jp/"/>
  <updated>2018-06-29T15:31:50+09:00</updated>
  <id>http://48n.jp/</id>
  <author>
    <name><![CDATA[Shohei Yamasaki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[そろそろlombokから卒業しようと考えています]]></title>
    <link href="http://48n.jp/blog/2018/06/29/graduate-from-lombok/"/>
    <updated>2018-06-29T15:26:49+09:00</updated>
    <id>http://48n.jp/blog/2018/06/29/graduate-from-lombok</id>
    <content type="html"><![CDATA[<p>便利な<a href="https://projectlombok.org/" target="_blank">lombok</a>ですが、そろそろオワコンな感じがしています。理由はJavaのアップデートに追従することが困難になってきているからです。詳しくは<a href="https://qiita.com/tmurakam99/items/b5ffe7f18bc06577f619" target="_blank">Lombok の Java9以降対応</a>の記事に書いてあります。実際、Java9対応も遅かったですね。lombokを使い続けると、Javaのアップデートに追従していけなくなる未来が想像できます。</p>

<p>Spring Bootも2系からはlombokは使っていませんね。</p>

<p>lombokは便利ですが、別に無くてもなんとかなるライブラリなので、あえてこれから使う選択をする必要はないと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[リモートワークは効率が悪いはウソ]]></title>
    <link href="http://48n.jp/blog/2018/06/28/about-remote-work/"/>
    <updated>2018-06-28T14:42:53+09:00</updated>
    <id>http://48n.jp/blog/2018/06/28/about-remote-work</id>
    <content type="html"><![CDATA[<p>ここ最近は週に1回ほどリモートワークで働いています。プログラミングであればリモートワークで問題ないです。</p>

<p>リモートワークの利点として会議に出なくていいことがあります。会社にいると何かと会議に招集されて時間や集中力が奪われてしまいますが、リモートワークであればその心配はありません。本当に出る必要がある会議であればリモートで参加すればいいですし、多くの場合は対面で話さずともドキュメントベースのコミュニケーションで事足ります。</p>

<p>ほかにも通勤時間が不要になることで1日に余裕ができるメリットがあります。私は往復で通勤時間に2時間が必要です。リモートワークにすればこの2時間が自由に使えるようになります。通勤時間がない分、早めに仕事を切り上げてその後の時間は子供と遊んだりできます。</p>

<p>リモートワークだと集中できない、生産性が下がるという意見がありますが、実際にやってみるとそんなデメリットはありませんでした。オフィスより家の方が集中できます。なぜなら、集中するには静かな場所が必要だからです。テレビがついているような騒がしい場所で集中することは難しいのです。オフィスはテレビがついている部屋と大して変わらないと思います。</p>

<p>リモートワーク導入で生産性が下がるのではないかという意見もありますが、そんなことはありません。通勤時間がなくなるうえ、集中できる環境であれば生産性が上がるのは当然でしょう。コミュニケーションが必要な時はSlackなどのツールを利用すればよいです。ただし、100％リモートワークとなるとコミュニケーションの問題が出てくるであろうというのはわかります。ですので、オフィスワークとリモートワークのハイブリットがバランスがよいのではないでしょうか。</p>

<p>頑張って残業するよりリモートワークを取り入れましょう。そのほうが生産性があがり社員の満足度もあがりますよ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[これからの技術書の書き方]]></title>
    <link href="http://48n.jp/blog/2018/06/27/how-to-write-future-tec-document/"/>
    <updated>2018-06-27T13:52:30+09:00</updated>
    <id>http://48n.jp/blog/2018/06/27/how-to-write-future-tec-document</id>
    <content type="html"><![CDATA[<p>技術書は少しずつ書いて有料で公開する。これが、これからの技術書の書き方だと思います。具体的な例としては「<a href="https://note.mu/makingx/m/m2dc6f318899c" target="_blank">はじめるSpring Boot 2</a>」があります。</p>

<p><a href="https://twitter.com/making" target="_blank">@Making</a>さんの記事「<a href="https://note.mu/makingx/n/n5d1d61f0b214" target="_blank">紙媒体の技術書を書きたくないです…</a>」に書かれているように技術書を書くには膨大な時間が必要です。それを全て書き終えて出版するには相当の時間がかかります。ITの技術はどんどん進歩しているので、出版される頃には古くなってしまう場合もあります。紙媒体だと内容が間違っていても修正できません。また、出版の期日に間に合わせるために、著者に非常に負担がかかります。今の出版のやり方はデメリットが多すぎるんですよね。</p>

<p>だいたい技術書の内容って全ては必要ない場合がほとんどです。一部だけ読みたいのに全てを購入するのは無駄なのです。これからは<a href="https://note.mu/" target="_blank">note</a>などのサービスを使って有料で出版されるケースが増えてくると思います。そうすれば、自分のペースで書けるし取り分も増えます。読むほうも必要なところだけ買えばいいので無駄がありませんね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ラピッドブラスターエリートデコのガチヤグラ必勝法]]></title>
    <link href="http://48n.jp/blog/2018/06/21/victory-gachiyagura/"/>
    <updated>2018-06-21T17:14:05+09:00</updated>
    <id>http://48n.jp/blog/2018/06/21/victory-gachiyagura</id>
    <content type="html"><![CDATA[<p>スプラトゥーン2のガチヤグラで勝つ方法を紹介します。私はこのやり方でS＋までいきました。ガチヤグラでなかなか勝てないイカの諸君の参考になればと思います。</p>

<h2 id="ラピッドブラスターエリートデコを使う">ラピッドブラスターエリートデコを使う</h2>
<p>ガチヤグラで私がおすすめする武器はラピッドブラスターエリートデコです。圧倒的な射程で一方的にヤグラ上の敵を倒すことができます。また、防衛拠点にいる敵をどかすこともできます。</p>

<p>ガチヤグラはブラスター系の武器が強いルールです。なぜかというと、ヤグラ上の敵はブラスターの爆風で簡単に倒すことができます。これがシューターになるとなかなかヤグラ上の敵に当てるのが難しいです。</p>

<h2 id="ラピッドブラスターエリートデコの立ち回り">ラピッドブラスターエリートデコの立ち回り</h2>
<p>ラピッドブラスターエリートデコは敵と確実に距離をとってラピッドブラスターエリートデコの弾だけ当たる距離で戦うことが基本的な立ち回りです。このような立ち回りをする理由は、射程が長い分近づかれると弾を当てるのが難しく、簡単に倒されてしまうからです。</p>

<h3 id="初動の立ち回り">初動の立ち回り</h3>
<p>初動は自陣をしっかり塗ります。インクを塗っておかないと相手との距離がとれなくなるため、簡単に倒されてしまいます。しっかりインクを塗っておきましょう。初動は自陣にインクを塗りつつ、戦況がどのように動くかを把握します。</p>

<h3 id="人数有利の場合の立ち回り">人数有利の場合の立ち回り</h3>
<p>こちらのチームが人数有利でヤグラ周りに敵がいなければ率先してヤグラに乗ってよいでしょう。ヤグラ上からヤグラに向かってくる敵や防衛拠点にいる敵を攻撃します。</p>

<h3 id="人数不利の場合の立ち回り">人数不利の場合の立ち回り</h3>
<p>人数不利の場合は、安全なところまで下がって味方が前線に復帰してくるのを待ちます。孤立した場合はリスポーンに戻ってしまってもよいです。敵がヤグラに乗っている場合は、安全なところからヤグラ上の敵を攻撃してヤグラの進行を妨害します。</p>

<h2 id="おすすめのギア">おすすめのギア</h2>
<p>おすすめするギアはイカ速、メインインク効率アップです。イカ速は敵との距離を取るために積んでいます。メインインク効率アップは、メイン効率がよくないため積んでいます。私はイカ速1.0、メインインク効率2.0を積んでいます。デスが少なく抑えれる場合はメインインク効率を1.0にして、ペナルティや逆境強化を積んでもよいでしょう。</p>

<h2 id="まとめ">まとめ</h2>
<p>ポイントは敵と距離をとって戦うこと、人数有利の時、人数不利の時の立ち回りを意識することです。あとは実践あるのみです。自然とこの立ち回りができるくらい実践を繰り返せば必ずウデマエはあがります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スプラトゥーン2が楽しすぎる]]></title>
    <link href="http://48n.jp/blog/2018/06/12/awesome-splatoon2/"/>
    <updated>2018-06-12T18:28:53+09:00</updated>
    <id>http://48n.jp/blog/2018/06/12/awesome-splatoon2</id>
    <content type="html"><![CDATA[<p>スプラトゥーン2が楽しすぎます。社会人になってからゲームはあまりしなくなってゲームは卒業かと思っていましたが、やばいゲームと出会ってしまいました。時間を見つけてはスプラトゥーン2をやっています。ハマりすぎて妻には愛想をつかされていますが、まあそれでもいいのです。</p>

<p>スプラトゥーン2はオンラインサバゲーのようなゲームです。味方と敵の2チームにわかれて自分のチームのインクを多く塗ったほうが勝ちです。幼稚園児でもできるシンプルなゲームです。そんなシンプルなゲームですが、プロゲーマーも多くいて、プロチームもあります。6月11日より世界大会が開催されて、第3回スプラトゥーン甲子園で優勝したGGBoyZが日本代表として出場します。</p>

<p>幼稚園児からプロゲーマーまで楽しめるゲームってなかなかないのではないでしょうか。クリエイターの人には脱帽ですね。素晴らしいゲームです。</p>

<p>ちなみに私のウデマエはS〜Aあたりをウロウロしています。あと100時間くらいやればS+はいけるんじゃないでしょうか。武器はプラコラやラピブラエリート、デュアルスイーパーカスタムなど中長距離武器をよく使ってます。</p>

<p>しばらくはやり続けるでしょうから、今後もスプラトゥーン2について書いていきたいと思います。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=syoyama-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B072J2J26T&amp;linkId=b397d3e0d93479554f7ad256a1279272"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[まだ設計書書いてるんですか？]]></title>
    <link href="http://48n.jp/blog/2018/05/14/unnecessary-document/"/>
    <updated>2018-05-14T17:28:36+09:00</updated>
    <id>http://48n.jp/blog/2018/05/14/unnecessary-document</id>
    <content type="html"><![CDATA[<p>私は自社開発のシステムを開発しているエンジニアなのですが、そのような現場でも設計書（詳細設計書や機能設計書のこと）が必要だという意見を耳にします。私は自社開発のシステムの場合、設計書は必要ないと思います。設計書を書く時間があったら1行でもコードを書いてほしいです。</p>

<p>そもそも、なぜ設計書が必要になったかというと、分析と実装を行う人が違ったからです。いわゆる、元請けが設計書を作って、実装は下請けに丸投げするやつですね。分析と実装を同じ人が行う場合は設計書は不要です。</p>

<p>生産性の観点からも考察してみます。</p>

<p>一般的に設計書にお金を払う人はいません。例えば、ホームページを業者に依頼したとして、設計書しか出てこなかったら金返せとなりますよね？<br />
人は動作するアプリケーションにのみお金を払います。基本的に資本主義の世界ではお金を払う人がいるものが価値のあるものです。この一般的な常識から次のような式が定義できます。</p>

<p>動作するアプリケーション &gt; 設計書</p>

<p>以上から、動作するアプリケーションを実装することに時間を使った方が生産性が高いと言えます。</p>

<p>設計書は分析する人と実装する人が違う場合のみに必要です。また、仮に必要だとしても設計書自体に価値はないため、最低限の時間で作るべきものです。</p>

<p>時間は有限です。であれば、価値のあることに時間を使いましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PMDでJavaのコードのバグをチェックする]]></title>
    <link href="http://48n.jp/blog/2018/03/20/usage-pmd/"/>
    <updated>2018-03-20T18:41:09+09:00</updated>
    <id>http://48n.jp/blog/2018/03/20/usage-pmd</id>
    <content type="html"><![CDATA[<p>Javaにおいてバグの要因となりそうなコードをチェックするツールとして、FindBugsがあります。しかし、FindBugsは2015年以降の開発が止まっているため、言語のアップデートに追従できていません。そこで、FindBugsの代替えとなる<a href="https://pmd.github.io/pmd-6.1.0/index.html" target="_blank">PMD</a>を紹介します。PMDを使えばバグの原因となりそうなコードを検知することができるため、不具合を未然に防ぐことが可能です。</p>

<h2 id="pmdとは">PMDとは</h2>

<p>PMDは次の4つの問題があるコードを検知することができるツールです。</p>

<ul>
  <li>Possible bugs - バグの要因となるコード</li>
  <li>Dead code - 使われていないコード</li>
  <li>Suboptimal code - 効率の悪いコード</li>
  <li>Overcomplicated expressions - 複雑な構文</li>
</ul>

<p>PMD自体はJavaで実装されていますが、Java以外の言語にも対応しています。今回はJavaのコードを対象に使い方を紹介します。</p>

<h2 id="pmdのインストール方法">PMDのインストール方法</h2>

<h3 id="homebrewでインストールする">Homebrewでインストールする</h3>

<p>Macであれば、次のコマンドでインストールできます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">brew install pmd</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="バイナリをダウンロードする">バイナリをダウンロードする</h3>

<p>バイナリをダウンロードしてインストールすることができます。次のページからダウンロードしてください。</p>

<ul>
  <li><a href="https://github.com/pmd/pmd/releases" target="_blank">the github releases page</a></li>
</ul>

<h2 id="pmdでコードをチェックする">PMDでコードをチェックする</h2>

<h3 id="サンプルコードの準備">サンプルコードの準備</h3>

<p>PMDでコードをチェックしてみます。今回はサンプルコードを作って検証します。サンプルコードはGithubにアップロードしているのでクローンしてご利用ください。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone git@github.com:shoyan/pmd-samples.git
</span><span class="line">cd pad-samples</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="pmdの実行">PMDの実行</h3>

<p>Pmdを実行します。<code>-d</code>がソースコードのパス、<code>-R</code>がルールが設定してあるファイルのパス、<code>-l</code>に言語を指定します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pmd pmd -d src/main/java -R rules.xml -l java
</span><span class="line">3月 20, 2018 6:03:49 午後 net.sourceforge.pmd.cache.NoopAnalysisCache &lt;init&gt;
</span><span class="line">警告: This analysis could be faster, please consider using Incremental Analysis: https://pmd.github.io/pmd-6.1.0/pmd_userdocs_getting_started.html#incremental-analysis
</span><span class="line">/pmd-samples/src/main/java/UnusedCode.java:2:        Avoid unused private fields such as 'FOO'.
</span><span class="line">/pmd-samples/src/main/java/UnusedCode.java:4:        Avoid unused local variables such as 'i'.
</span><span class="line">/pmd-samples/src/main/java/UnusedCode.java:6:        Avoid unused private methods such as 'foo()'.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3つの問題が検知されています。UnusedCode.javaの2行目を見てみると、使われていないメンバ変数があります。他のエラーも同様に使われていないローカル変数とプライベートメソッドを検知しています。</p>

<h3 id="ルールについて">ルールについて</h3>

<p>ルールの一覧については次のリンクよりご覧ください。</p>
<ul>
  <li><a href="https://pmd.github.io/pmd-6.1.0/pmd_rules_java.html" target="_blank">Java Rules</a></li>
</ul>

<p>0の状態からルールを構築するのは大変です。そのため、PMDのリポジトリには様々なルールのサンプルが定義されています。基本的なルールが網羅されているbasic.xmlを利用するとよいでしょう。他にも様々なルールがあるので参考にしてください。</p>
<ul>
  <li><a href="https://github.com/pmd/pmd/tree/master/pmd-java/src/main/resources/rulesets/java" target="_blank">rulesets java</a></li>
</ul>

<h3 id="カテゴリ">カテゴリ</h3>

<p>PMDのルールはカテゴリに分類されています。例えば、ベストプラクティスであれば、ベストプラクティスに沿ったルールが定義されています。カテゴリの詳細については次のリンクでご覧ください。</p>

<ul>
  <li><a href="https://github.com/pmd/pmd/tree/master/pmd-java/src/main/resources/category/java" target="_blank">category</a></li>
</ul>

<h2 id="トラブルシューティング">トラブルシューティング</h2>

<p>PMD6.1.0はPMD7への過渡期バージョンのようで、Deprecatedの警告が山のように出ます。<br />
設定ファイルでしか警告を消す術がないので設定ファイルを修正します。</p>

<p>次のようにdeprecatedをfalseにするか、プロパティ自体を削除してください。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;rule ref="category/java/errorprone.xml/AvoidBranchingStatementAsLastInLoop" deprecated=“false" /&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="参考リンク">参考リンク</h2>

<ul>
  <li><a href="https://pmd.github.io/pmd-6.1.0/index.html" target="_blank">PMD Introduction</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginxで構築するキャッシュプロキシサーバ]]></title>
    <link href="http://48n.jp/blog/2018/03/13/cache-proxy-server-build-with-nginx/"/>
    <updated>2018-03-13T15:27:18+09:00</updated>
    <id>http://48n.jp/blog/2018/03/13/cache-proxy-server-build-with-nginx</id>
    <content type="html"><![CDATA[<p>Nginxを使えば簡単にプロキシサーバを構築することができます。手元で動かせるサンプルコードをGithubで公開しています。git cloneしてご利用ください。PCにDockerがインストールされていれば簡単に動作環境を構築することができます。</p>

<p><a href="https://github.com/shoyan/nginx-proxy-cache" target="_blank">https://github.com/shoyan/nginx-proxy-cache</a></p>

<h2 id="キャッシュを有効にする">キャッシュを有効にする</h2>

<p>Nginxのキャッシュ機能はデフォルトでは有効ではないので、設定する必要があります。</p>

<p>/etc/nginx/nginx.conf</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class=""><span class="line">user  nginx;
</span><span class="line">worker_processes  1;
</span><span class="line">
</span><span class="line">error_log  /var/log/nginx/error.log warn;
</span><span class="line">pid        /var/run/nginx.pid;
</span><span class="line">
</span><span class="line">
</span><span class="line">events {
</span><span class="line">    worker_connections  1024;
</span><span class="line">}
</span><span class="line">
</span><span class="line">
</span><span class="line">http {
</span><span class="line">    # キャッシュの場所を指定する
</span><span class="line">    # levels: キャッシュの階層レベル
</span><span class="line">    # keys_zone: 使用する共有メモリゾーンの名前とサイズ
</span><span class="line">    proxy_cache_path /var/cache/nginx/cache levels=1:2 keys_zone=my-key:10m;
</span><span class="line">    proxy_temp_path /var/cache/nginx/tmp;
</span><span class="line">
</span><span class="line">    include       /etc/nginx/mime.types;
</span><span class="line">    default_type  application/octet-stream;
</span><span class="line">
</span><span class="line">    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
</span><span class="line">                      '$status $body_bytes_sent "$http_referer" '
</span><span class="line">                      '"$http_user_agent" "$http_x_forwarded_for"';
</span><span class="line">
</span><span class="line">    access_log  /var/log/nginx/access.log  main;
</span><span class="line">
</span><span class="line">    sendfile        on;
</span><span class="line">    #tcp_nopush     on;
</span><span class="line">
</span><span class="line">    keepalive_timeout  65;
</span><span class="line">
</span><span class="line">    #gzip  on;
</span><span class="line">
</span><span class="line">    include /etc/nginx/conf.d/*.conf;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>次にlocationディレクティブでキャッシュを有効にします。</p>

<p>/etc/nginx/conf.d/default.conf</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class=""><span class="line">server {
</span><span class="line">    listen       80;
</span><span class="line">    server_name  localhost;
</span><span class="line">
</span><span class="line">    proxy_set_header    Host    $host;
</span><span class="line">    proxy_set_header    X-Real-IP    $remote_addr;
</span><span class="line">    proxy_set_header    X-Forwarded-Host       $host;
</span><span class="line">    proxy_set_header    X-Forwarded-Server    $host;
</span><span class="line">    proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
</span><span class="line">
</span><span class="line">    location / {
</span><span class="line">        # 8081のポートで起動しているサーバにプロキシする
</span><span class="line">        proxy_pass    http://app:8081/;
</span><span class="line">        # 全てのアクセスをキャッシュする
</span><span class="line">        proxy_ignore_headers Cache-Control;
</span><span class="line">        # my-keyというキー名でキャッシュを登録
</span><span class="line">        proxy_cache my-key;
</span><span class="line">        # キャッシュは1分間有効にする
</span><span class="line">        proxy_cache_valid any 1m;
</span><span class="line">        # レスポンスヘッダにキャッシュがヒットしたかどうかを付与する
</span><span class="line">        add_header X-Nginx-Cache $upstream_cache_status;
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以上の設定を行えばキャッシュが有効になります。</p>

<p>キャッシュの詳細な設定についてはNginxのドキュメントを参照ください。<br />
<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html" target="_blank">ngx_http_proxy_module</a></p>

<p>アプリサーバはNode.jsで構築しています。1秒でHello Worldを返す単純なアプリサーバです。こちらもDockerで動作するのでNode.jsをPCにインストールする必要はありません。</p>

<p>プロキシサーバとアプリサーバの起動は次のコマンドで行います。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ docker-compose up
</span><span class="line">Starting proxycachesample_app_1 ...
</span><span class="line">Starting proxycachesample_app_1 ... done
</span><span class="line">Starting proxycachesample_proxy_1 ...
</span><span class="line">Starting proxycachesample_proxy_1 ... done
</span><span class="line">Attaching to proxycachesample_app_1, proxycachesample_proxy_1
</span><span class="line">app_1    | Server running at http://localhost:8081/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>1回目のアクセスはリクエストがアプリサーバまで行くのでレスポンスタイムは1秒程度かかります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl http://localhost:8080 -w "%{time_total}"
</span><span class="line">Hello World
</span><span class="line">1.009103</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2回目からのアクセスはプロキシサーバがキャッシュしているため、レスポンスタイムが速くなります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl http://localhost:8080  -w "%{time_total}"
</span><span class="line">Hello World
</span><span class="line">0.003797</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>確認が終わったらサーバを停止しておきましょう。サーバの停止はCtrl+Cか次のコマンドで行えます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ docker-compose stop</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[なぜ人は前例がないことを避けるのか]]></title>
    <link href="http://48n.jp/blog/2018/03/08/why-do-people-avoid-unprecedented-things/"/>
    <updated>2018-03-08T15:20:13+09:00</updated>
    <id>http://48n.jp/blog/2018/03/08/why-do-people-avoid-unprecedented-things</id>
    <content type="html"><![CDATA[<p>今までの経験がないことをやろうとすると反発の声が上がることあります。その主な理由の1つは「前例がないから」です。</p>

<p>なぜ人は前例がないことを避けるのかについて考えてみます。</p>

<p>前例がないということは不確実だということです。過去に答えはなく、未来にしか答えはありません。<br />
未来のことはいくら考えてもわかりません。不確実な未来を確実なものにする方法は1つだけです。その方法とは実際にやってみることです。実際にやってみて、その結果からしか学ぶ術はありません。</p>

<p>人は不確実な状態を避けたがります。それは動物に備わっている生き残るための本能からです。人は不確実な状態に直面すると不安を感じます。不安の状態でいるのは居心地が悪いため、なんとかしてこの状態を避けようとします。</p>

<p>以上のように不確実な状態に直面すると人は本能的に不安を感じます。この不安を解消するための方法は2つあります。1つ目は不確実な物事に近づかないことです。不確実な物事に近づかなければ不安を感じることはありません。</p>

<p>2つ目は不確実な状態を確実な状態にすることです。確実な状態になれば不安は消えます。不確実な状態を確実な状態にするには、実際にやってみるしかありません。このプロセスなしに不確実な物事を確実な物事にすることはできないのです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[エンジニアが意識しておくべきこと]]></title>
    <link href="http://48n.jp/blog/2018/01/22/think-our-goal/"/>
    <updated>2018-01-22T15:06:05+09:00</updated>
    <id>http://48n.jp/blog/2018/01/22/think-our-goal</id>
    <content type="html"><![CDATA[<p>私たちのような物作りに関わるエンジニアが意識しておかないといけないものは成果物（アウトプット）です。成果物とは最終的にユーザーから見えるものです。例えば、Webアプリケーションであれば最終的に画面に出力されるWebページです。</p>

<p>私たちエンジニアは、今やっている作業が成果物に繋がるのかを理解する必要があります。</p>

<p>IT系のエンジニアで多いのはコードの書き方や実装の細部にこだわってしまうことです。そこにこだわってしまうと時間を使い過ぎてしまいます。その結果、私たちが最終的に作っている成果物（ユーザーから見える画面）がおそろかになってしまいます。</p>

<p>コードの書き方や実装の細部を高めることは私たちが目指すゴールではありません。私たちが目指すゴールとは成果物を作り、ユーザーに届けることです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradleのjavaプラグインとは]]></title>
    <link href="http://48n.jp/blog/2018/01/21/gradle-java-plugin/"/>
    <updated>2018-01-21T00:52:36+09:00</updated>
    <id>http://48n.jp/blog/2018/01/21/gradle-java-plugin</id>
    <content type="html"><![CDATA[<p>build.gradleでよく見かける<code>apply plugin: ‘java'</code>という記述について説明します。この記述をするとgradleにjavaプラグインが追加されます。プラグインはgradleの機能を拡張するためのもので、javaプラグインを追加するとjavaに関連するタスクが使えるようになります。</p>

<p>何もプラグインを追加していないgradleタスクは以下の通りです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>gradle tasks
</span><span class="line">
</span><span class="line">&gt; Task :tasks
</span><span class="line">
</span><span class="line">------------------------------------------------------------
</span><span class="line">All tasks runnable from root project
</span><span class="line">------------------------------------------------------------
</span><span class="line">
</span><span class="line">Build Setup tasks
</span><span class="line">-----------------
</span><span class="line">init - Initializes a new Gradle build.
</span><span class="line">wrapper - Generates Gradle wrapper files.
</span><span class="line">
</span><span class="line">Help tasks
</span><span class="line">----------
</span><span class="line">buildEnvironment - Displays all buildscript dependencies declared in root project <span class="s1">&#39;gs-gradle&#39;</span>.
</span><span class="line">components - Displays the components produced by root project <span class="s1">&#39;gs-gradle&#39;</span>. <span class="o">[</span>incubating<span class="o">]</span>
</span><span class="line">dependencies - Displays all dependencies declared in root project <span class="s1">&#39;gs-gradle&#39;</span>.
</span><span class="line">dependencyInsight - Displays the insight into a specific dependency in root project <span class="s1">&#39;gs-gradle&#39;</span>.
</span><span class="line">dependentComponents - Displays the dependent components of components in root project <span class="s1">&#39;gs-gradle&#39;</span>. <span class="o">[</span>incubating<span class="o">]</span>
</span><span class="line"><span class="nb">help</span> - Displays a <span class="nb">help </span>message.
</span><span class="line">model - Displays the configuration model of root project <span class="s1">&#39;gs-gradle&#39;</span>. <span class="o">[</span>incubating<span class="o">]</span>
</span><span class="line">projects - Displays the sub-projects of root project <span class="s1">&#39;gs-gradle&#39;</span>.
</span><span class="line">properties - Displays the properties of root project <span class="s1">&#39;gs-gradle&#39;</span>.
</span><span class="line">tasks - Displays the tasks runnable from root project <span class="s1">&#39;gs-gradle&#39;</span>.
</span><span class="line">
</span><span class="line">To see all tasks and more detail, run gradle tasks --all
</span><span class="line">
</span><span class="line">To see more detail about a task, run gradle <span class="nb">help</span> --task &lt;task&gt;
</span><span class="line">
</span><span class="line">
</span><span class="line">BUILD SUCCESSFUL in 0s
</span><span class="line"><span class="m">1</span> actionable task: <span class="m">1</span> executed
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Javaプラグインを定義したあとのタスクは以下の通りです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>gradle tasks
</span><span class="line">Starting a Gradle Daemon <span class="o">(</span>subsequent builds will be faster<span class="o">)</span>
</span><span class="line">
</span><span class="line">&gt; Task :tasks
</span><span class="line">
</span><span class="line">------------------------------------------------------------
</span><span class="line">All tasks runnable from root project
</span><span class="line">------------------------------------------------------------
</span><span class="line">Build tasks
</span><span class="line">-----------
</span><span class="line">assemble - Assembles the outputs of this project.
</span><span class="line">build - Assembles and tests this project.
</span><span class="line">buildDependents - Assembles and tests this project and all projects that depend on it.
</span><span class="line">buildNeeded - Assembles and tests this project and all projects it depends on.
</span><span class="line">classes - Assembles main classes.
</span><span class="line">clean - Deletes the build directory.
</span><span class="line">jar - Assembles a jar archive containing the main classes.
</span><span class="line">testClasses - Assembles <span class="nb">test </span>classes.
</span><span class="line">
</span><span class="line">Build Setup tasks
</span><span class="line">-----------------
</span><span class="line">init - Initializes a new Gradle build.
</span><span class="line">wrapper - Generates Gradle wrapper files.
</span><span class="line">
</span><span class="line">Documentation tasks
</span><span class="line">-------------------
</span><span class="line">javadoc - Generates Javadoc API documentation <span class="k">for</span> the main <span class="nb">source </span>code.
</span><span class="line">
</span><span class="line">Help tasks
</span><span class="line">----------
</span><span class="line">buildEnvironment - Displays all buildscript dependencies declared in root project <span class="s1">&#39;gs-gradle&#39;</span>.
</span><span class="line">components - Displays the components produced by root project <span class="s1">&#39;gs-gradle&#39;</span>. <span class="o">[</span>incubating<span class="o">]</span>
</span><span class="line">dependencies - Displays all dependencies declared in root project <span class="s1">&#39;gs-gradle&#39;</span>.
</span><span class="line">dependencyInsight - Displays the insight into a specific dependency in root project <span class="s1">&#39;gs-gradle&#39;</span>.
</span><span class="line">dependentComponents - Displays the dependent components of components in root project <span class="s1">&#39;gs-gradle&#39;</span>. <span class="o">[</span>incubating<span class="o">]</span> <span class="nb">help</span> - Displays a <span class="nb">help </span>message.
</span><span class="line">model - Displays the configuration model of root project <span class="s1">&#39;gs-gradle&#39;</span>. <span class="o">[</span>incubating<span class="o">]</span>
</span><span class="line">projects - Displays the sub-projects of root project <span class="s1">&#39;gs-gradle&#39;</span>.
</span><span class="line">properties - Displays the properties of root project <span class="s1">&#39;gs-gradle&#39;</span>.
</span><span class="line">tasks - Displays the tasks runnable from root project <span class="s1">&#39;gs-gradle&#39;</span>.
</span><span class="line">
</span><span class="line">Verification tasks
</span><span class="line">------------------
</span><span class="line">check - Runs all checks.
</span><span class="line"><span class="nb">test</span> - Runs the unit tests.
</span><span class="line">
</span><span class="line">Rules
</span><span class="line">-----
</span><span class="line">Pattern: clean&lt;TaskName&gt;: Cleans the output files of a task.
</span><span class="line">Pattern: build&lt;ConfigurationName&gt;: Assembles the artifacts of a configuration.
</span><span class="line">Pattern: upload&lt;ConfigurationName&gt;: Assembles and uploads the artifacts belonging to a configuration.
</span><span class="line">
</span><span class="line">To see all tasks and more detail, run gradle tasks --all
</span><span class="line">
</span><span class="line">To see more detail about a task, run gradle <span class="nb">help</span> --task &lt;task&gt;
</span><span class="line">
</span><span class="line">
</span><span class="line">BUILD SUCCESSFUL in 5s
</span><span class="line"><span class="m">1</span> actionable task: <span class="m">1</span> executed
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Build tasks、Documentation tasks、Verification tasksが追加されています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IntelliJでSpringBootのアプリケーションを作成する]]></title>
    <link href="http://48n.jp/blog/2018/01/19/create-spring-boot-project/"/>
    <updated>2018-01-19T11:48:27+09:00</updated>
    <id>http://48n.jp/blog/2018/01/19/create-spring-boot-project</id>
    <content type="html"><![CDATA[<p>SpringBootのアプリケーションを作成する方法はいくつかありますが、今回はIntelliJで作成する方法を紹介します。</p>

<p>IntellJを起動してメニューバーから <code>File</code> &gt; <code>New</code> &gt; <code>Project...</code>を選択します。</p>

<p>左メニューよりSpring Initializrを選択してNextを押します。</p>

<p><img src="http://48n.jp/images/create-spring-boot-project1.png" alt="weather-nitify-slack" /></p>

<p>Project MetaDataはアプリケーションごとに書き換えますが、今回はデモなのでデフォルトのままです。<br />
Gradleを使うのでTypeをGradle Project を選択してNextを押します。</p>

<p><img src="http://48n.jp/images/create-spring-boot-project2.png" alt="weather-nitify-slack" /></p>

<p>Dependenciesでは使いたいライブラリを選択できます。<br />
今回は特に選択せず、Nextを押します。</p>

<p><img src="http://48n.jp/images/create-spring-boot-project3.png" alt="weather-nitify-slack" /></p>

<p>Project nameはdemoで作成します。<br />
Project locationでファイルを作成する場所を指定します。</p>

<p><img src="http://48n.jp/images/create-spring-boot-project4.png" alt="weather-nitify-slack" /></p>

<p>Finishを押すとSpring Bootのアプリケーションが作成されます。<br />
作成したファイルをGitHubにアップロードしています。</p>

<p><a href="https://github.com/shoyan/spring-boot-demo">https://github.com/shoyan/spring-boot-demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[わかりやすいスライドを誰でも作れるようになる方法]]></title>
    <link href="http://48n.jp/blog/2017/12/21/create-slide-with-iphone/"/>
    <updated>2017-12-21T16:32:48+09:00</updated>
    <id>http://48n.jp/blog/2017/12/21/create-slide-with-iphone</id>
    <content type="html"><![CDATA[<p>こんにちは、SHOYANです。この記事は<a href="https://qiita.com/advent-calendar/2017/infrapre">プレゼン研究会 Advent Calendar 2017</a>の21日目の投稿です。</p>

<h2 id="わかりやすいスライドを誰でも作れるようになる方法">わかりやすいスライドを誰でも作れるようになる方法</h2>

<p>本記事ではプレゼンを観る人に理解しやすいスライドを作る方法を紹介します。その方法はとても簡単です。<strong>スライドはモバイル端末で作成する</strong>。たったこれだけです。モバイル端末で作成することで誰でも文字が少ない簡潔なスライドが作成できるようになります。</p>

<h2 id="文字が多いスライドは聴衆の観る気を無くさせる">文字が多いスライドは聴衆の観る気を無くさせる</h2>

<p>文字数が少なくなると必要な情報が伝えられなくなるじゃないかという声が聞こえてきそうです。しかし、観る側の立場となって考えてみましょう。文字がたくさんあるスライドを瞬時に理解できますか？多くの人にとって理解できないはずです。というのも、<strong>人間の脳は一度に多くの情報を処理するのは得意ではない</strong>からです。脳が処理できない情報過多のスライドが連続するとどういう現象が起こるでしょうか。聴衆はプレゼンを聴く気を無くします。</p>

<h2 id="人間の脳が理解しやすいのはイメージ">人間の脳が理解しやすいのはイメージ</h2>

<p>人間の脳が理解しやすいのはイメージです。イメージを多くして文字の情報を減らすことで理解しやすくなります。モバイル端末を使うとイメージを使いやすいメリットがあります。大抵のモバイル端末にはカメラ機能があるので、写真を簡単に設定することができるからです。</p>

<p>モバイル端末で作成することで必然的に文字が少なくなります。なぜかといいますと、PCのように多くの文字を打つのは大変なため、必然的に文字が少なくなるからです。さらに、文字を打つのが面倒なので何とか写真を使えないだろうかと考えるようになります。<strong>あえて文字が打ちにくいという制約をつけることで発想を転換する</strong>ことができます。</p>

<p>少ない情報でこちらの意図を伝えるためには情報の取捨選択をせざるを得ません。それによって情報の純度の高いスライドを作ることができます。</p>

<h2 id="iphoneのkeynoteを使う">iPhoneのkeynoteを使う</h2>

<p>私はiPhoneのkeynoteを使用しています。まず、iPhoneのkeynoteでスライドのアウトラインを作ります。これで大体7割くらい完成しています。ファイルはiCouldで共有します。理由はPCで最後の仕上げをするからです。最後にPCのkeynoteで全体の調整や必要な情報を盛り込みます。ここで情報を盛り込み過ぎないように注意してください。</p>

<h2 id="スライドの作成手順">スライドの作成手順</h2>

<p>まとめると、スライドの作成手順は次のようになります。</p>

<ol>
  <li>iPhoneでアウトラインを作成</li>
  <li>PCで仕上げる</li>
</ol>

<p>ぜひこの方法を試してみてください。PCで作成するよりもスライドが作りやすいと感じるはずです。また、モバイル端末なのでどこでもスライドが作成できます。ちょっとした隙間時間にスライドを作ることができます。スライドの作成が捗ることを実感いただけると思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2017年のPHPについて数値をまとめてみました]]></title>
    <link href="http://48n.jp/blog/2017/12/12/php2017/"/>
    <updated>2017-12-12T17:22:48+09:00</updated>
    <id>http://48n.jp/blog/2017/12/12/php2017</id>
    <content type="html"><![CDATA[<p>この記事は<a href="https://qiita.com/advent-calendar/2017/php">PHP Advent Calendar 2017</a> 14日目の記事です。</p>

<p>こんにちは、SHOYANです。2017年ももうすぐ終わりということで、2017年のPHPをふりかえってみるのはいかがでしょうか。この記事ではPHPに関係する情報を集め、数値としてまとめました。</p>

<h2 id="2017年にphpについて書かれた記事ってどれくらい">2017年にPHPについて書かれた記事ってどれくらい？</h2>

<p>まずは、PHPについて書かれた記事からいってみましょう。<br />
インターネット上の全ての記事を探してくるのは膨大な時間がかかるので、<a href="https://qiita.com/search?utf8=%E2%9C%93&amp;sort=&amp;q=tag%3APHP+created%3A%3E2017-01-01">Qiitaで書かれた記事</a>を対象としました。</p>

<p>2017年は<span style="font-weight:bolder">2,528</span>件の記事が書かれました。</p>

<p>最もいいねのついた記事は<a href="https://qiita.com/higty">@higty</a>さんの書いた<a href="https://qiita.com/higty/items/f1f981719b1a59b9e020">世界で通用するエンジニアになるための高度な技術記事（英語）</a>でした。PHPのタグがついていますが、この記事はあまりPHPっぽくないですね？ストックの多い記事でピュアなPHPの記事は少ないという印象でした。</p>

<h2 id="2017年にphpで書かれたコードってどれくらい">2017年にPHPで書かれたコードってどれくらい？</h2>

<p>2017年に世界でどれくらいの量のPHPのコードが書かれたか興味がありませんか？<br />
コードの量というのを定量的に表すのは難しいので、ここでは<a href="https://github.com/search?utf8=%E2%9C%93&amp;q=created%3A%3E%3D2017-01-01+language%3APHP&amp;type=Repositories">GitHubで2017年に作成されたリポジトリの数</a>を紹介します。</p>

<p>2017年にGitHub作成されたリポジトリの数は<span style="font-weight:bolder">458,187</span>でした。さすが、ユーザーの多いPHPといった数字です。</p>

<p>その中で最もスターを集めたのは<a href="https://github.com/jupeter/clean-code-php">jupeter/clean-code-php</a> でした。</p>

<h2 id="phperって世界に何人くらいいるの">PHPerって世界に何人くらいいるの？</h2>

<p>世界中にどれくらいのPHPerがいるでしょうか？<br />
<a href="https://github.com/search?utf8=%E2%9C%93&amp;q=language%3APHP&amp;type=Users">GitHubからPHPerの数</a>を調べてみました。</p>

<p>GitHubのPHPerの数は<span style="font-weight:bolder">569,735</span>人です。</p>

<h2 id="phpのアップデートってどれくらい行われた">PHPのアップデートってどれくらい行われた？</h2>

<p>PHPの公式サイトの<a href="http://php.net/archive/2017.php">リリース情報</a>によると、2017年に合計で<span style="font-weight:bolder">39</span>回のアップデートが行われています。活発に開発が行われていることが伺えますね。</p>

<h2 id="phpの求人の数ってどれくらいあるの">PHPの求人の数ってどれくらいあるの？</h2>

<p>PHPの求人の数ってどれくらいあるのでしょうか？<br />
<a href="https://tenshoku.mynavi.jp/engineer/list/o16/kwPHP/">マイナビ転職</a>によると求職数は<span style="font-weight:bolder">1,155</span>件でした。</p>

<h2 id="2017年に出版されたphpの書籍は何冊">2017年に出版されたPHPの書籍は何冊？</h2>

<p>2017年に日本で発売されたPHPの書籍は何冊か知っていますか？<br />
<a href="http://amzn.to/2AbjybB">14冊の書籍</a>が発売されています。</p>

<h2 id="phpってそんなにひどい言語ではないと思う理由">PHPってそんなにひどい言語ではないと思う理由</h2>

<p>ここまで読んでくださってありがとうございます。最後は私のPHPに対するポエムです。</p>

<p>実は最近はあまりPHPを書く機会がありません。それでも、PHPに対する思い入れは他の言語と比べても強いと思います。それは、私のエンジニア歴の中でPHPとの付き合いが１番長いからです。私がはじめて習得した言語はPHPです。</p>

<p>初めてプログラミングに触れる人にとってPHPはとっつきやすい言語だと思います。なぜなら、PHPは多くの人が使っているため、情報がたくさんあるからです。そのため、情報が調べやすく習得の敷居が低いのです。</p>

<p>環境構築のコストが低いのもメリットです。ほとんどのホスティングサービスがPHPに対応しているため、自分が作ったサイトをインターネットに公開するのも容易です。</p>

<p>色々ディスられることも多いPHPですが、初心者に親しみやすい言語という点に関しては他の言語より優れているのではと思います。多くの人にプログラミングを広めた功績は誰も否定できないでしょう。そんなPHPを私はこれからも応援していきたいと思います。</p>

<p><em>補足</em><br />
<em>数値は2017年12月13日のものです。</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2017年のRubyについて数値をまとめてみました]]></title>
    <link href="http://48n.jp/blog/2017/12/10/ruby2017/"/>
    <updated>2017-12-10T08:05:39+09:00</updated>
    <id>http://48n.jp/blog/2017/12/10/ruby2017</id>
    <content type="html"><![CDATA[<p>この記事は<a href="https://qiita.com/advent-calendar/2017/ruby">Ruby Advent Calendar 2017</a> 10日目の記事です。</p>

<p>こんにちは、SHOYANです。2017年ももうすぐ終わりますね。みなさんにとって2017年はどのような年だったでしょうか。<br />
おそらくこの記事を読んでいるほとんどの方がRubyを好きなのだと思います。であれば、2017年にRubyでどのようなことが起こったのか気になりませんか？そんなRubyが大好きなあなたに向けて、本記事では2017年のRubyについてまとめました。</p>

<h2 id="2017年にrubyについて書かれた記事ってどれくらい">2017年にRubyについて書かれた記事ってどれくらい？</h2>

<p>まずは、Rubyについて書かれた記事からいってみましょう。<br />
インターネット上の全ての記事を探してくるのは膨大な時間がかかるので、ここでの対象は<a href="https://qiita.com/search?q=tag%3ARuby+created%3A%3E2017-01-01">Qiitaで書かれた記事</a>とします。</p>

<p>2017年は<span style="font-weight:bolder">2,969</span>件の記事が書かれました。</p>

<p>最もいいねのついた記事は<a href="https://qiita.com/gazayas">@gazayas</a>さんの書いた<a href="https://qiita.com/gazayas/items/3d352d1b6ec9a225c6f6">外国人が語る：英語でクラスやメソッド等の名付け方</a>でした。</p>

<h2 id="2017年にrubyで書かれたコードってどれくらい">2017年にRubyで書かれたコードってどれくらい？</h2>

<p>2017年に世界でどれくらいの量のRubyのコードが書かれたか興味がありませんか？<br />
コードの量というのを定量的に表すのは難しいので、ここではGitHubで2017年に作成されたリポジトリの数を紹介します。</p>

<p>2017年にGitHub作成されたリポジトリの数は<span style="font-weight:bolder">277,359</span>でした。</p>

<p>その中で最もスターを集めたのは<a href="https://github.com/atech/postal">atech/postal</a> でした。</p>

<h2 id="rubyistって世界に何人くらいいるの">Rubyistって世界に何人くらいいるの？</h2>

<p>世界中にどれくらいのRubyistがいるでしょうか？<br />
GitHubからRubyistの数を調べてみました。</p>

<p>GitHubのRubyistの数は<span style="font-weight:bolder">368,282</span>人です。</p>

<h2 id="rubyのアップデートってどれくらい行われた">Rubyのアップデートってどれくらい行われた？</h2>

<p>2017年はRuby2.4がリリースされました。Rubyの公式サイトのリリース情報によると、2017年に合計で<span style="font-weight:bolder">6</span>回のアップデートが行われています。</p>

<h2 id="rubyistの求人の数ってどれくらいあるの">Rubyistの求人の数ってどれくらいあるの？</h2>

<p>Rubyistの求人の数ってどれくらいあるのでしょうか？<br />
マイナビ転職によると求職数は<span style="font-weight:bolder">598</span>件でした。</p>

<h2 id="2017年に出版されたrubyの書籍は何冊">2017年に出版されたRubyの書籍は何冊？</h2>

<p>2017年に日本で発売されたRubyの書籍は何冊か知っていますか？<br />
<a href="http://amzn.to/2jfF8sa">14冊の書籍</a>が発売されています。</p>

<h3 id="最後に">最後に</h3>

<p>Rubyに関する様々な指標をまとめてみましたが、いかがでしたでしょうか。どのような指標が面白かったでしょうか？感想をフィードバックしていただけると嬉しいです。2018年もたくさんのRubyのコードや記事が書かれ、たくさんの素晴らしいプロダクトが誕生することでしょう。最後まで記事を読んでくださってどうもありがとうございました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[これから機械学習の理論を学ぶ人に最適な入門書とは？]]></title>
    <link href="http://48n.jp/blog/2017/09/29/math-basic-for-machine-leaning/"/>
    <updated>2017-09-29T11:21:09+09:00</updated>
    <id>http://48n.jp/blog/2017/09/29/math-basic-for-machine-leaning</id>
    <content type="html"><![CDATA[<p>こんにちは、SHOYANです。</p>

<p>様々なところで使われるようになってきている機械学習ですが、その仕組みを理解するには数学の知識が必要なため、そこが壁になっている人も多いことかと思います。という私もその1人です。今回、そのような初学者向けに良い入門本が出版されたので紹介します。</p>

<h2 id="やさしく学ぶ-機械学習を理解するための数学の基本">やさしく学ぶ 機械学習を理解するための数学の基本</h2>

<p><a href="http://amzn.to/2yweltz" target="_blank"><img src="http://tkengo.github.io/assets/img/ml-math/cover-math.png" alt="やさしく学ぶ 機械学習を理解するための数学の基本" style="border-width:0;width:50%;float:right;" /></a></p>

<p>2017年9月にマイナビ出版より発売されています。物語を読むような感覚で機械学習の理論と数学を学べるようになっており、これから機械学習の理論を学んでいく初学者に最適な1冊です。機械学習に使われる理論と数式について、アヤノ、ミオの2人の登場人物が会話形式で学んでいきます。</p>

<h3 id="著者の紹介">著者の紹介</h3>

<p>著者の<a href="https://twitter.com/tkengo" target="_blank">立石賢吾</a>さんはLINE Fukuoka株式会社でデータ分析や機械学習を使った業務を行っているエンジニアです。<a href="https://maths4pg-fuk.connpass.com/" target="_blank">プログラマのための数学勉強会@福岡</a>も主催しています。</p>

<h3 id="この一冊で機械学習の理論と数学実装まで">この一冊で機械学習の理論と数学、実装まで</h3>

<p>機械学習でよく使われる、回帰、分類、クラスタリングとその理論についての説明が主な内容となっています。アヤノ、ミオの2人によって会話形式で話が展開されていくため、物語を読んでいく感覚で機械学習の理論を学んでいくことができます。数学については付録があり、そちらでより詳しく学べるようにもなっています。また、Pythonを使ったサンプルコードが用意されており、実際に動かすことができます。この1冊で機械学習の理論、数学、実装を一通り学べるようになっています。</p>

<h2 id="これから機械学習の理論を学ぼうと考えている初学者に最適">これから機械学習の理論を学ぼうと考えている初学者に最適</h2>

<p>私自身、初学者向けの機械学習の本を何冊か見てきましたが、この本が1番わかりやすいように思います。なぜかといいますと、アヤノ、ミオの2人による会話形式で話が展開されていくため、物語を読むように理論を学ぶことができます。また、疑問に思う部分についてはアヤノが質問するようになっており、そのおかげで都度疑問が解消されていきます。これから機械学習の理論を学び始める人、難しくて挫折してしまった人におすすめの入門書です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[航空券を安くとる方法]]></title>
    <link href="http://48n.jp/blog/2017/09/17/book-now-cheap-airplane-ticket/"/>
    <updated>2017-09-17T13:24:10+09:00</updated>
    <id>http://48n.jp/blog/2017/09/17/book-now-cheap-airplane-ticket</id>
    <content type="html"><![CDATA[<p>こんにちは、SHOYANです。</p>

<p>東京出張の予定があるので航空券をとりました。<br />
航空券は早く予約して、なるべく安い会社の航空券を買えば安く手にいれることができます。</p>

<h2 id="おすすめの購入方法">おすすめの購入方法</h2>

<p>安い航空券を探すには、航空券の比較サイトを使うと便利です。<br />
私は<a href="https://px.a8.net/svt/ejp?a8mat=2TRBTF+BHSA7M+3UZC+61C2Q" target="_blank" rel="nofollow">スカイ・シー</a><img border="0" width="1" height="1" src="https://www17.a8.net/0.gif?a8mat=2TRBTF+BHSA7M+3UZC+61C2Q" alt="" />と<a href="https://px.a8.net/svt/ejp?a8mat=2TRBTN+4S2ALU+2PPI+5YJRM" target="_blank" rel="nofollow">トラベリスト</a><img border="0" width="1" height="1" src="https://www19.a8.net/0.gif?a8mat=2TRBTN+4S2ALU+2PPI+5YJRM" alt="" />を利用しました。</p>

<h2 id="スカイシー">スカイ・シー</h2>

<p><a href="https://px.a8.net/svt/ejp?a8mat=2TRBTF+BHSA7M+3UZC+5ZU29" target="_blank" rel="nofollow">
<img border="0" width="300" height="250" alt="" src="https://www22.a8.net/svt/bgt?aid=170916243695&amp;wid=001&amp;eno=01&amp;mid=s00000018012001007000&amp;mc=1" /></a><br />
<img border="0" width="1" height="1" src="https://www15.a8.net/0.gif?a8mat=2TRBTF+BHSA7M+3UZC+5ZU29" alt="" /></p>

<p>14社から航空券を検索することができます。面倒な会員登録が必要ないのもメリットの1つです。もちろん、領収書も発行できます。今回はスカイ・シーでチケットを購入しました。</p>

<h2 id="トラべリスト">トラべリスト</h2>

<p><a href="https://px.a8.net/svt/ejp?a8mat=2TRBTN+4S2ALU+2PPI+65U41" target="_blank" rel="nofollow">
<img border="0" width="300" height="250" alt="" src="https://www27.a8.net/svt/bgt?aid=170916251289&amp;wid=001&amp;eno=01&amp;mid=s00000012663001035000&amp;mc=1" /></a><br />
<img border="0" width="1" height="1" src="https://www10.a8.net/0.gif?a8mat=2TRBTN+4S2ALU+2PPI+65U41" alt="" /></p>

<p>クルーズグループが運営する格安航空券サイトです。こちらは10社から航空券を検索できるようです。いまなら会員登録すると600円オフのクーポン券がゲットできます。</p>

<h2 id="最安値は8790円">最安値は8,790円</h2>

<p>福岡→羽田間の10月の最安値はスカイ・シー、トラべリストともに8,790円でした。<br />
この価格だと高速バスよりも安いです。高速バスだと半日ほどかかりますが、飛行機だと2時間弱で行けてしまうので、そう考えるととてつもなく飛行機って便利ですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[戦争のふちに立たされている日本]]></title>
    <link href="http://48n.jp/blog/2017/09/07/japan-is-standing-at-the-edge-of-war/"/>
    <updated>2017-09-07T11:17:11+09:00</updated>
    <id>http://48n.jp/blog/2017/09/07/japan-is-standing-at-the-edge-of-war</id>
    <content type="html"><![CDATA[<p>こんにちは、SHOYANです。</p>

<p>きな臭いタイトルですが、北朝鮮とはいつ戦争が始まってもおかしくない状況になってきました。今後、どのように状況が動いていくかは中国の動き次第と言えます。</p>

<h2 id="今後の動向の鍵を握る中国">今後の動向の鍵を握る中国</h2>

<p>予想される最悪のシナリオは経済制裁の強化で北朝鮮が先制攻撃に出ることです。このシナリオは第2次世界大戦を彷彿とさせます。第2次世界大戦のきっかけとなったのは日本が行った真珠湾への先制攻撃ですが、この原因はアメリカが日本に行った経済制裁です。具体的には石油の輸出禁止措置です。石油の輸出禁止措置がきっかけで日本は真珠湾攻撃を行いました。私はこれと同じことが北朝鮮で起こってしまうのではないかと危惧しています。</p>

<p>石油の90%を中国からの輸入に頼っている北朝鮮ですが、ここで中国がどのような行動をとるかが今後の事態に大きく影響してくるでしょう。中国としては東アジアにおけるアメリカの影響力をこれ以上高めたくないので、北朝鮮の先制攻撃を誘発する石油の輸出禁止措置を行う可能性は低いと思います。しかし、北朝鮮と中国の関係がうまくいっていない現状では、アメリカの圧力に屈した中国が石油の輸出禁止措置に踏み切る可能性がないとは言い切れない状況です。</p>

<h2 id="アメリカに残された時間は少ない">アメリカに残された時間は少ない</h2>

<p>アメリカが北朝鮮に対して強硬手段に出れる時間はそれほど残されていません。核搭載の長距離弾道ミサイルが完成に近づいています。ミサイルの飛距離と精度は時間に比例してあがっており、アメリカ本土へと届く日もそう遠くはないでしょう。アメリカとしては今のタイミングで北朝鮮をなんとかしたいと考えているはずです。</p>

<h2 id="戦争のふちに立たされている日本">戦争のふちに立たされている日本</h2>

<p>仮に戦争が始まったらどうなるでしょうか。日本は黙って見ているわけにはいきません。自衛隊は戦争に参加することになります。韓国も参加せざるをえないでしょう。このことはトランプ大統領のツイートからも見てとれます。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="en" dir="ltr">I am allowing Japan &amp; South Korea to buy a substantially increased amount of highly sophisticated military equipment from the United States.</p>&mdash; Donald J. Trump (@realDonaldTrump) <a href="https://twitter.com/realDonaldTrump/status/905047095488516098">2017年9月5日</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote>
  <p>I am allowing Japan &amp; South Korea to buy a substantially increased amount of highly sophisticated military equipment from the United States.<br />
私は日本と韓国にさらに十分な量の最新式の高度な軍事品をアメリカから買うことを許可しています。</p>
</blockquote>

<p>要するに戦争が始まった時のために、アメリカからたくさん軍事品を買って準備しといてねということです。日本は戦争のふちに立たされているのが現在の状況です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日本語を使う外国人があまりにも少なすぎる現状]]></title>
    <link href="http://48n.jp/blog/2017/09/05/less-japanese-learners/"/>
    <updated>2017-09-05T16:16:22+09:00</updated>
    <id>http://48n.jp/blog/2017/09/05/less-japanese-learners</id>
    <content type="html"><![CDATA[<p>こんにちは、SHOYANです。</p>

<p>最近の北朝鮮の状況を世界はどう見ているのだろうかと、海外メディアを見ることが多くなったこの頃。<a href="https://www.nytimes.com/">NewYorkTimes</a>を見ていた時に英語版の他に、中国語版とスペイン語版があることに気づきました。このようなところで、国の影響力の強さをうかがい知れたりするものです。</p>

<h2 id="スペイン語は世界で4位">スペイン語は世界で4位</h2>

<p>中国の人口とGDPを鑑みると、中国語版があることは納得できます。スペイン語版があるのはなぜなのかと疑問に思ったので、スペイン語が世界でどれくらい使われているのかを調べてみました。Wikipediaの<a href="https://en.wikipedia.org/wiki/List_of_languages_by_total_number_of_speakers">List of languages by total number of speakers</a>によるとスペイン語を使う世界の人口は4位で、およそ5億人がスペイン語を使っています。これは、16世紀ごろにスペインが世界中に築き上げてきた植民地、スペイン帝国のなごりだと考えられます。</p>

<h2 id="第2外国語としての日本語のスピーカーがあまりにも少ない">第2外国語としての日本語のスピーカーがあまりにも少ない</h2>

<p>言語別に見てみましょう。</p>

<table>
  <tbody>
    <tr>
      <td>順位</td>
      <td>言語</td>
      <td>母国語として話す人</td>
      <td>第2外国語として話す人</td>
      <td>話す人の合計</td>
    </tr>
    <tr>
      <td>1位</td>
      <td>中国語</td>
      <td>8億9700万人</td>
      <td>1億9300万人</td>
      <td>10億9000万人</td>
    </tr>
    <tr>
      <td>2位</td>
      <td>英語</td>
      <td>3億7100万人</td>
      <td>6億1100万人</td>
      <td>9億8300万人</td>
    </tr>
    <tr>
      <td>3位</td>
      <td>ヒンディー語</td>
      <td>3億2900万人</td>
      <td>2億1500万人</td>
      <td>5億4400万人</td>
    </tr>
    <tr>
      <td>4位</td>
      <td>スペイン語</td>
      <td>4億3600万人</td>
      <td>9100万人</td>
      <td>5億2700万人</td>
    </tr>
    <tr>
      <td>5位</td>
      <td>アラビア語</td>
      <td>2億9000万人</td>
      <td>1億3200万人</td>
      <td>4億2200万人</td>
    </tr>
    <tr>
      <td>6位</td>
      <td>マレー語</td>
      <td>7700万人</td>
      <td>2億400万人</td>
      <td>2億8100万人</td>
    </tr>
    <tr>
      <td>7位</td>
      <td>ロシア語</td>
      <td>1億5300万人</td>
      <td>1億1300万人</td>
      <td>2億6700万人</td>
    </tr>
    <tr>
      <td>8位</td>
      <td>ベンガル語</td>
      <td>2億4200万人</td>
      <td>1900万人</td>
      <td>2億6100万人</td>
    </tr>
    <tr>
      <td>9位</td>
      <td>ポルトガル語</td>
      <td>2億1800万人</td>
      <td>1100万人</td>
      <td>2億2900万人</td>
    </tr>
    <tr>
      <td>10位</td>
      <td>フランス語</td>
      <td>7600万人</td>
      <td>1億5300万人</td>
      <td>2億2900万人</td>
    </tr>
    <tr>
      <td>11位</td>
      <td>ハウサ語</td>
      <td>8500万人</td>
      <td>6500万人</td>
      <td>1億4800万人</td>
    </tr>
    <tr>
      <td>12位</td>
      <td>パンジャーブ語</td>
      <td>1億4800万人</td>
      <td>?</td>
      <td>1億4800万人</td>
    </tr>
    <tr>
      <td>13位</td>
      <td>日本語</td>
      <td>1億2800万人</td>
      <td>100万人</td>
      <td>1億2900万人</td>
    </tr>
  </tbody>
</table>

<p>日本語は13位です。第2外国語として話す人の人口も公開されているのですが、なんと日本語は100万人程度です。<br />
他の言語に比べてあまりにも少なすぎる。これは日本だけ間違っているのではないかと勘ぐりたくなるくらいの違いです。地理的な要因が大きいと考えられますが、外国人から見て日本という国はあまり魅力的ではないのかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ハッカソンでチャットBotを作って感じた課題]]></title>
    <link href="http://48n.jp/blog/2017/09/01/osan-report-vol11/"/>
    <updated>2017-09-01T17:30:56+09:00</updated>
    <id>http://48n.jp/blog/2017/09/01/osan-report-vol11</id>
    <content type="html"><![CDATA[<p>GMOペパボで開催された<a href="http://osan.pepabo.com/">ハッカソン</a>に参加するため東京へ行ってきました。<br />
チームを作って、2日でプロダクトを作るというイベントです。</p>

<h2 id="チームについて">チームについて</h2>

<p><img src="http://img-cdn.jg.jugem.jp/b8d/927914/20170809_1578727.jpg" alt="チーム" /></p>

<p>エンジニア2名とデザイナー、カスタマーサービスの4名で構成されています（農家ではありませんよ！）。<br />
チームメンバーについては、なるべく異なった技能を持つ人で構成しようと考えました。<br />
チーム名はすいかとかぼちゃです。開催されたのが8月だったので、夏っぽい名前をコンセプトとしましたが、深い意味はありません。</p>

<h2 id="お産合宿で作ったもの">お産合宿で作ったもの</h2>

<p>チャットBotを作りました。チャットBotにした理由は、チャットBotの作成に関するサービス、オープンソースが充実してきたことです。これらを利用すればそれほどコードを書かずにチャットBotの実装が可能だと考えました。また、どれほどの労力でどれほどのものが作れるかといったことを実際に検証してみたかったという理由もあります。</p>

<h2 id="お産合宿1日目">お産合宿1日目</h2>

<p>朝6時に家を出て東京に移動しました。朝が早すぎて大変でした。<br />
会場に着いたらまずは、事前に担当を決めて実装していたコードをマージしました。<br />
チャットBotを各自のPCで動かして、機能の修正、データのチューニングを行いました。<br />
デモができる程度には出来たので、24時に就寝しました。</p>

<h2 id="お産合宿2日目">お産合宿2日目</h2>

<p>朝7時に起床して、外を15分くらい散歩しました。<br />
東京は福岡に比べて高層ビルが多いですね。緑が意識的に植えてあって丁寧に管理されてあるんだなぁという印象でした（この写真にはほとんど写っていませんが）。</p>

<p><img src="http://48n.jp/images/osan01.jpeg" alt="osan01" /></p>

<p>朝食を食べて、開発開始。15時から品評会です。<br />
今回は19チームの参加があり、たくさんのプロダクトができていました。</p>

<p><img src="http://48n.jp/images/osan02.jpeg" alt="osan02" /></p>

<p>19時の飛行機で福岡へ帰りました。</p>

<h2 id="チャットbotを作って感じた課題">チャットBotを作って感じた課題</h2>

<p>実際にチャットBotを作ってみることで、どういうことができて、どこが課題なのかを肌で感じることができました。</p>

<h3 id="ウェブベースのチャットbotの開発コスト">ウェブベースのチャットBotの開発コスト</h3>

<p>今回はウェブブラウザで動作するチャットBotを作ったのですが、チャットのUI自体を自前で用意する必要がありました。LINEやFacebook Messengerのプラットフォーム上で動くボットであればチャットの画面自体の開発が必要ないため、開発コストを削減できます。この点から各種のプラットフォームで動くボットが主流となっていると考えられます。とはいえ、WebベースのチャットBotの需要はあるでしょうから、WebベースのチャットBotを簡単に作れるサービスの需要はあると思います。ちなみに今回は<a href="https://nodejs.org/en/">Node.js</a>+<a href="https://socket.io/">Socket.io</a>と<a href="https://github.com/botui/botui">BotUI</a>を使って実装しました。</p>

<h3 id="回答精度の問題">回答精度の問題</h3>

<p>質問の解析、返答に関してはユーザーローカルが提供している<a href="http://ai.userlocal.jp/">人工知能チャットボットのAPI</a>を利用しました。<br />
単純なキーワード一致であれば対応できますが、少し複雑な質問になると全然関係のない応答を返したりと、精度の点ではまだまだといった印象でした。</p>

<h2 id="終わりに">終わりに</h2>

<p>チャットBotの開発に関しては多くのサービスやソフトウェアが提供されており、まさにチャットBot戦国時代といったところでしょうか。このように、チャットBotを作る環境は整ってきつつあります。しかし、自然な会話ができるチャットBotを誰もが作れるわけではなく、まだまだノウハウやコツが必要だと感じます。</p>
]]></content>
  </entry>
  
</feed>
