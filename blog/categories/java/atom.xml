<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | SHOYAN BLOG]]></title>
  <link href="https://48n.jp/blog/categories/java/atom.xml" rel="self"/>
  <link href="https://48n.jp/"/>
  <updated>2019-08-19T13:01:49+09:00</updated>
  <id>https://48n.jp/</id>
  <author>
    <name><![CDATA[Shohei Yamasaki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SetterとBuilderの使いわけ]]></title>
    <link href="https://48n.jp/blog/2018/06/29/use-of-setter-or-builder/"/>
    <updated>2018-06-29T17:39:49+09:00</updated>
    <id>https://48n.jp/blog/2018/06/29/use-of-setter-or-builder</id>
    <content type="html"><![CDATA[<p>先日、「SetterとBuilderはどのように使いわければいいのか？」という質問を受けました。なかなかよい質問ですね。Builderを使うとクラスのインスタンスを柔軟に作ることができます。Builderを使ったサンプルコードです。</p>

<pre><code class="language-java">User user = User.builder()
        .lastName("山田")
        .firstName("太郎")
        .build();
</code></pre>

<p>Builderを実装したUserクラスのサンプルコードです。</p>

<pre><code class="language-java">public class User {
    private final String lastName;
    private final String firstName;

    User(String lastName, String firstName) {
        this.lastName = lastName;
        this.firstName = firstName;
    }

    public static UserBuilder builder() {
        return new UserBuilder();
    }

    public static class UserBuilder {
        private String lastName;
        private String firstName;

        UserBuilder() {
        }

        public UserBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }

        public UserBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }

        public User build() {
            return new User(lastName, firstName);
        }
    }
}
</code></pre>

<p>Setterを使うと次のようになります(実装は省略)。</p>

<pre><code class="language-java">User user = new User();
user.setLastName("山田");
user.setFirstName("太郎");
</code></pre>

<p>Setterの問題点として、インスタンスの状態を変更してしまうことがあります。イミュータブルな実装にする場合、原則としてコンストラクタで値は設定するべきでSetterで変更するべきではありません。</p>

<p>では、Setterではなくコンストラクタで設定するようにしましょう。引数が少ないうちは問題がないのですが、次の例のように引数の数が増えてしまうとコードが煩雑になってしまいます。</p>

<pre><code class="language-java">// 姓、名、年齢、血液型、国が引数のコンストラクタの例
// 年齢と血液型は不明だが、nullを指定する必要がある
User user = new User("山田", "太郎", null, null, "日本");
</code></pre>

<p>そこで、Builderを使うメリットが出てきます。Builderを使えば柔軟にパラメーターの設定が行えるようになります。</p>

<pre><code class="language-java">User user = User.builder()
        .lastName("山田")
        .firstName("太郎")
        .country("日本")
        .build();
</code></pre>

<p>SetterもBuilderもやりたいことはオブジェクトにパラメーターをセットすることです。Setterを使うとオブジェクトの状態を変更してしまうことになります。イミュータブルな実装かつ柔軟にパラメーターを設定したい場合はBuilderを使いましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[そろそろlombokから卒業しようと考えています]]></title>
    <link href="https://48n.jp/blog/2018/06/29/graduate-from-lombok/"/>
    <updated>2018-06-29T15:26:49+09:00</updated>
    <id>https://48n.jp/blog/2018/06/29/graduate-from-lombok</id>
    <content type="html"><![CDATA[<p>便利な<a href="https://projectlombok.org/" target="_blank">lombok</a>ですが、そろそろオワコンな感じがしています。理由はJavaのアップデートに追従することが困難になってきているからです。詳しくは<a href="https://qiita.com/tmurakam99/items/b5ffe7f18bc06577f619" target="_blank">Lombok の Java9以降対応</a>の記事に書いてあります。実際、Java9対応も遅かったですね。lombokを使い続けると、Javaのアップデートに追従していけなくなる未来が想像できます。</p>

<p>Spring Bootも2系からはlombokは使っていませんね。</p>

<p>lombokは便利ですが、別に無くてもなんとかなるライブラリなので、あえてこれから使う選択をする必要はないと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PMDでJavaのコードのバグをチェックする]]></title>
    <link href="https://48n.jp/blog/2018/03/20/usage-pmd/"/>
    <updated>2018-03-20T18:41:09+09:00</updated>
    <id>https://48n.jp/blog/2018/03/20/usage-pmd</id>
    <content type="html"><![CDATA[<p>Javaにおいてバグの要因となりそうなコードをチェックするツールとして、FindBugsがあります。しかし、FindBugsは2015年以降の開発が止まっているため、言語のアップデートに追従できていません。そこで、FindBugsの代替えとなる<a href="https://pmd.github.io/pmd-6.1.0/index.html" target="_blank">PMD</a>を紹介します。PMDを使えばバグの原因となりそうなコードを検知することができるため、不具合を未然に防ぐことが可能です。</p>

<h2 id="pmdとは">PMDとは</h2>

<p>PMDは次の4つの問題があるコードを検知することができるツールです。</p>

<ul>
  <li>Possible bugs - バグの要因となるコード</li>
  <li>Dead code - 使われていないコード</li>
  <li>Suboptimal code - 効率の悪いコード</li>
  <li>Overcomplicated expressions - 複雑な構文</li>
</ul>

<p>PMD自体はJavaで実装されていますが、Java以外の言語にも対応しています。今回はJavaのコードを対象に使い方を紹介します。</p>

<h2 id="pmdのインストール方法">PMDのインストール方法</h2>

<h3 id="homebrewでインストールする">Homebrewでインストールする</h3>

<p>Macであれば、次のコマンドでインストールできます。</p>

<pre><code>brew install pmd
</code></pre>

<h3 id="バイナリをダウンロードする">バイナリをダウンロードする</h3>

<p>バイナリをダウンロードしてインストールすることができます。次のページからダウンロードしてください。</p>

<ul>
  <li><a href="https://github.com/pmd/pmd/releases" target="_blank">the github releases page</a></li>
</ul>

<h2 id="pmdでコードをチェックする">PMDでコードをチェックする</h2>

<h3 id="サンプルコードの準備">サンプルコードの準備</h3>

<p>PMDでコードをチェックしてみます。今回はサンプルコードを作って検証します。サンプルコードはGithubにアップロードしているのでクローンしてご利用ください。</p>

<pre><code>git clone git@github.com:shoyan/pmd-samples.git
cd pad-samples
</code></pre>

<h3 id="pmdの実行">PMDの実行</h3>

<p>Pmdを実行します。<code>-d</code>がソースコードのパス、<code>-R</code>がルールが設定してあるファイルのパス、<code>-l</code>に言語を指定します。</p>

<pre><code>pmd pmd -d src/main/java -R rules.xml -l java
3月 20, 2018 6:03:49 午後 net.sourceforge.pmd.cache.NoopAnalysisCache &lt;init&gt;
警告: This analysis could be faster, please consider using Incremental Analysis: https://pmd.github.io/pmd-6.1.0/pmd_userdocs_getting_started.html#incremental-analysis
/pmd-samples/src/main/java/UnusedCode.java:2:        Avoid unused private fields such as 'FOO'.
/pmd-samples/src/main/java/UnusedCode.java:4:        Avoid unused local variables such as 'i'.
/pmd-samples/src/main/java/UnusedCode.java:6:        Avoid unused private methods such as 'foo()'.
</code></pre>

<p>3つの問題が検知されています。UnusedCode.javaの2行目を見てみると、使われていないメンバ変数があります。他のエラーも同様に使われていないローカル変数とプライベートメソッドを検知しています。</p>

<h3 id="ルールについて">ルールについて</h3>

<p>ルールの一覧については次のリンクよりご覧ください。</p>
<ul>
  <li><a href="https://pmd.github.io/pmd-6.1.0/pmd_rules_java.html" target="_blank">Java Rules</a></li>
</ul>

<p>0の状態からルールを構築するのは大変です。そのため、PMDのリポジトリには様々なルールのサンプルが定義されています。基本的なルールが網羅されているbasic.xmlを利用するとよいでしょう。他にも様々なルールがあるので参考にしてください。</p>
<ul>
  <li><a href="https://github.com/pmd/pmd/tree/master/pmd-java/src/main/resources/rulesets/java" target="_blank">rulesets java</a></li>
</ul>

<h3 id="カテゴリ">カテゴリ</h3>

<p>PMDのルールはカテゴリに分類されています。例えば、ベストプラクティスであれば、ベストプラクティスに沿ったルールが定義されています。カテゴリの詳細については次のリンクでご覧ください。</p>

<ul>
  <li><a href="https://github.com/pmd/pmd/tree/master/pmd-java/src/main/resources/category/java" target="_blank">category</a></li>
</ul>

<h2 id="トラブルシューティング">トラブルシューティング</h2>

<p>PMD6.1.0はPMD7への過渡期バージョンのようで、Deprecatedの警告が山のように出ます。<br />
設定ファイルでしか警告を消す術がないので設定ファイルを修正します。</p>

<p>次のようにdeprecatedをfalseにするか、プロパティ自体を削除してください。</p>

<pre><code>&lt;rule ref="category/java/errorprone.xml/AvoidBranchingStatementAsLastInLoop" deprecated=“false" /&gt;
</code></pre>

<h2 id="参考リンク">参考リンク</h2>

<ul>
  <li><a href="https://pmd.github.io/pmd-6.1.0/index.html" target="_blank">PMD Introduction</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradleのjavaプラグインとは]]></title>
    <link href="https://48n.jp/blog/2018/01/21/gradle-java-plugin/"/>
    <updated>2018-01-21T00:52:36+09:00</updated>
    <id>https://48n.jp/blog/2018/01/21/gradle-java-plugin</id>
    <content type="html"><![CDATA[<p>build.gradleでよく見かける<code>apply plugin: ‘java'</code>という記述について説明します。この記述をするとgradleにjavaプラグインが追加されます。プラグインはgradleの機能を拡張するためのもので、javaプラグインを追加するとjavaに関連するタスクが使えるようになります。</p>

<p>何もプラグインを追加していないgradleタスクは以下の通りです。</p>

<pre><code class="language-bash">$ gradle tasks

&gt; Task :tasks

------------------------------------------------------------
All tasks runnable from root project
------------------------------------------------------------

Build Setup tasks
-----------------
init - Initializes a new Gradle build.
wrapper - Generates Gradle wrapper files.

Help tasks
----------
buildEnvironment - Displays all buildscript dependencies declared in root project 'gs-gradle'.
components - Displays the components produced by root project 'gs-gradle'. [incubating]
dependencies - Displays all dependencies declared in root project 'gs-gradle'.
dependencyInsight - Displays the insight into a specific dependency in root project 'gs-gradle'.
dependentComponents - Displays the dependent components of components in root project 'gs-gradle'. [incubating]
help - Displays a help message.
model - Displays the configuration model of root project 'gs-gradle'. [incubating]
projects - Displays the sub-projects of root project 'gs-gradle'.
properties - Displays the properties of root project 'gs-gradle'.
tasks - Displays the tasks runnable from root project 'gs-gradle'.

To see all tasks and more detail, run gradle tasks --all

To see more detail about a task, run gradle help --task &lt;task&gt;


BUILD SUCCESSFUL in 0s
1 actionable task: 1 executed
</code></pre>

<p>Javaプラグインを定義したあとのタスクは以下の通りです。</p>

<pre><code class="language-bash">$ gradle tasks
Starting a Gradle Daemon (subsequent builds will be faster)

&gt; Task :tasks

------------------------------------------------------------
All tasks runnable from root project
------------------------------------------------------------ 
Build tasks
-----------
assemble - Assembles the outputs of this project.
build - Assembles and tests this project.
buildDependents - Assembles and tests this project and all projects that depend on it.
buildNeeded - Assembles and tests this project and all projects it depends on.
classes - Assembles main classes.
clean - Deletes the build directory.
jar - Assembles a jar archive containing the main classes.
testClasses - Assembles test classes.

Build Setup tasks
-----------------
init - Initializes a new Gradle build.
wrapper - Generates Gradle wrapper files.

Documentation tasks
-------------------
javadoc - Generates Javadoc API documentation for the main source code.

Help tasks
----------
buildEnvironment - Displays all buildscript dependencies declared in root project 'gs-gradle'.
components - Displays the components produced by root project 'gs-gradle'. [incubating]
dependencies - Displays all dependencies declared in root project 'gs-gradle'.
dependencyInsight - Displays the insight into a specific dependency in root project 'gs-gradle'.
dependentComponents - Displays the dependent components of components in root project 'gs-gradle'. [incubating] help - Displays a help message.
model - Displays the configuration model of root project 'gs-gradle'. [incubating]
projects - Displays the sub-projects of root project 'gs-gradle'.
properties - Displays the properties of root project 'gs-gradle'.
tasks - Displays the tasks runnable from root project 'gs-gradle'.

Verification tasks
------------------
check - Runs all checks.
test - Runs the unit tests.

Rules
-----
Pattern: clean&lt;TaskName&gt;: Cleans the output files of a task.
Pattern: build&lt;ConfigurationName&gt;: Assembles the artifacts of a configuration.
Pattern: upload&lt;ConfigurationName&gt;: Assembles and uploads the artifacts belonging to a configuration.

To see all tasks and more detail, run gradle tasks --all

To see more detail about a task, run gradle help --task &lt;task&gt;


BUILD SUCCESSFUL in 5s
1 actionable task: 1 executed
</code></pre>

<p>Build tasks、Documentation tasks、Verification tasksが追加されています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IntelliJでSpringBootのアプリケーションを作成する]]></title>
    <link href="https://48n.jp/blog/2018/01/19/create-spring-boot-project/"/>
    <updated>2018-01-19T11:48:27+09:00</updated>
    <id>https://48n.jp/blog/2018/01/19/create-spring-boot-project</id>
    <content type="html"><![CDATA[<p>SpringBootのアプリケーションを作成する方法はいくつかありますが、今回はIntelliJで作成する方法を紹介します。</p>

<p>IntellJを起動してメニューバーから <code>File</code> &gt; <code>New</code> &gt; <code>Project...</code>を選択します。</p>

<p>左メニューよりSpring Initializrを選択してNextを押します。</p>

<p><img src="/images/create-spring-boot-project1.png" alt="weather-nitify-slack" /></p>

<p>Project MetaDataはアプリケーションごとに書き換えますが、今回はデモなのでデフォルトのままです。<br />
Gradleを使うのでTypeをGradle Project を選択してNextを押します。</p>

<p><img src="/images/create-spring-boot-project2.png" alt="weather-nitify-slack" /></p>

<p>Dependenciesでは使いたいライブラリを選択できます。<br />
今回は特に選択せず、Nextを押します。</p>

<p><img src="/images/create-spring-boot-project3.png" alt="weather-nitify-slack" /></p>

<p>Project nameはdemoで作成します。<br />
Project locationでファイルを作成する場所を指定します。</p>

<p><img src="/images/create-spring-boot-project4.png" alt="weather-nitify-slack" /></p>

<p>Finishを押すとSpring Bootのアプリケーションが作成されます。<br />
作成したファイルをGitHubにアップロードしています。</p>

<p><a href="https://github.com/shoyan/spring-boot-demo">https://github.com/shoyan/spring-boot-demo</a></p>
]]></content>
  </entry>
  
</feed>
