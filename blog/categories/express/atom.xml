<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Express | SHOYAN BLOG]]></title>
  <link href="http://48n.jp/blog/categories/express/atom.xml" rel="self"/>
  <link href="http://48n.jp/"/>
  <updated>2018-12-17T17:41:54+09:00</updated>
  <id>http://48n.jp/</id>
  <author>
    <name><![CDATA[Shohei Yamasaki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Expressのインストールと構成を把握する]]></title>
    <link href="http://48n.jp/blog/2016/05/17/first-step-express/"/>
    <updated>2016-05-17T13:33:55+09:00</updated>
    <id>http://48n.jp/blog/2016/05/17/first-step-express</id>
    <content type="html"><![CDATA[<p>Node.jsのフレームワーク、<a href="http://expressjs.com">Express</a>を試してみました。  <br />
ExpressはNode.jsでwebアプリケーションを作成するためのフレームワークです。</p>

<h2 id="インストール">インストール</h2>

<p>まずは、Node.jsをインストールします。</p>

<p>以下のページからパッケージをダウンロードしてインストールします。  <br />
https://nodejs.org/en/</p>

<p>次にnpmを使って<a href="http://expressjs.com/en/starter/generator.html">express-generator</a>をインストールします。  <br />
express-generatorはExpressのスケルトンアプリケーションを作成するコマンドです。  <br />
npmはNode.jsをインストールした際にインストールされていると思います。</p>

<pre><code>$ sudo npm install express-generator -g

</code></pre>

<h2 id="スケルトンアプリケーションを作成する">スケルトンアプリケーションを作成する</h2>

<p>expressコマンドでスケルトンアプリケーションを作成します。</p>

<pre><code>$ express myapp
$ cd myapp
$ npm install

</code></pre>

<p>起動してみます。</p>

<pre><code>⇒  DEBUG=myapp:* npm start

&gt; myapp@0.0.0 start /Users/PMAC025S/Development/sample/nodejs/myapp
&gt; node ./bin/www

  myapp:server Listening on port 3000 +0ms
GET / 200 659.865 ms - 170
GET /stylesheets/style.css 200 9.088 ms - 111
GET /favicon.ico 404 70.846 ms - 1285

</code></pre>

<p><code>http://localhost:3000</code> にアクセスしてみます。<br />
Welcome to Express と表示されていれば正常に起動できています。</p>

<p>サーバーの停止は<code>Ctrl + C</code>です。</p>

<h2 id="ルーティング">ルーティング</h2>

<p>ルーティングの基本的な構造です。</p>

<pre><code>app.METHOD(PATH, HANDLER)

</code></pre>

<p><strong>app</strong>: expressのインスタンス  <br />
<strong>METHOD</strong>: HTTPメソッド(GET, POST, PUT, PATCH, DELETE等)  <br />
<strong>PATH</strong>: サーバーのパス  <br />
<strong>HANDLER</strong>: 実行する関数</p>

<p>Hello World!を返すルーティングのサンプルです。  <br />
<code>/</code>にGETリクエストを送ると、Hello World!が返却されます。</p>

<pre><code class="language-javascript">app.get('/', function (req, res) {
  res.send('Hello World!');
});

</code></pre>

<p><code>/</code>にPOSTリクエストを送ると、<code>Got a POST request</code>が返却されます。</p>

<pre><code>app.post('/', function (req, res) {
  res.send('Got a POST request');
});

</code></pre>

<h2 id="expressの構造">Expressの構造</h2>

<p>express-generator で作成されたファイルを確認していきます。  <br />
ファイル構成は以下です。</p>

<pre><code>⇒  tree -L 2
.
├── app.js
├── bin
│   └── www
├── node_modules
│   ├── body-parser
│   ├── cookie-parser
│   ├── debug
│   ├── express
│   ├── jade
│   ├── morgan
│   └── serve-favicon
├── package.json
├── public
│   ├── images
│   ├── javascripts
│   └── stylesheets
├── routes
│   ├── index.js
│   └── users.js
└── views
    ├── error.jade
    ├── index.jade
    └── layout.jade

</code></pre>

<h3 id="appjs">app.js</h3>

<p>app.jsではアプリの設定やルーティングを定義します。  <br />
簡単なアプリであれば、ここに全て書いてしまってもよいでしょう。  <br />
express-generatorで作成されたファイル構成では、<code>routes/</code>、<code>views/</code> ディレクトリが作成されており、ルーティングやテンプレートは分離する構成となっています。</p>

<h3 id="bin">bin</h3>
<p>実行ファイルが格納されます。</p>

<h3 id="node_modules">node_modules</h3>
<p>Expressなどのモジュールが入っているディレクトリです。npmでインストールしたファイルが格納されます。</p>

<h3 id="packagejson">package.json</h3>
<p>アプリの設定やメタ情報を定義するファイルです。</p>

<h3 id="public">public</h3>
<p>公開ディレクトリです、cssファイル、imageファイル、JavaScriptファイルを格納します。</p>

<h3 id="routes">routes</h3>
<p>アプリケーションのルーティングと処理を定義したファイルを格納します。</p>

<h3 id="viewsディレクトリ">viewsディレクトリ</h3>
<p>テンプレートを定義したファイルを格納します。</p>

<p>Expressの構成は把握できました。  <br />
次はExpressを使ってチャットアプリケーションを作ってみたいと思います(次回へ続く)。</p>

<h3 id="参考リンク">参考リンク</h3>

<ul>
  <li><a href="http://expressjs.com/en/starter/installing.html">Installing Express</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
