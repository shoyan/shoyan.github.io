<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Chef | SHOYAN BLOG]]></title>
  <link href="http://48n.jp/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://48n.jp/"/>
  <updated>2018-11-29T16:12:46+09:00</updated>
  <id>http://48n.jp/</id>
  <author>
    <name><![CDATA[Shohei Yamasaki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NginxのCookbookでハマった]]></title>
    <link href="http://48n.jp/blog/2016/05/31/tips-for-nginx-cookbook/"/>
    <updated>2016-05-31T18:03:46+09:00</updated>
    <id>http://48n.jp/blog/2016/05/31/tips-for-nginx-cookbook</id>
    <content type="html"><![CDATA[<p>Nginxのcookbookでversionを指定しているのに、指定したバージョンでインストールされない問題でハマった。</p>

<p><a href="https://supermarket.chef.io/cookbooks/nginx">https://supermarket.chef.io/cookbooks/nginx</a></p>
<h2 id="結果としてわかったこと">結果としてわかったこと</h2>

<p>パッケージでインストールする場合はバージョンが指定できない。  <br />
バージョンを指定したい場合はソースでインストールする必要がある。</p>

<p>Nginx cookbookはパッケージでのインストールかソースでのインストールのいずれかを選ぶことができる。  <br />
デフォルトはパッケージである。  <br />
ソースでインストールしたい場合は、<code>node['nginx']['install_method’]='source'</code> とする必要がある。  <br />
<code>install_method</code>を指定したときにはじめてversionの指定が可能となる。</p>

<h2 id="立ちはだかる様々な問題">立ちはだかる様々な問題</h2>
<h3 id="versionが反映されない">versionが反映されない</h3>

<p><code>attributes/default.rb</code>にversionを定義してみたが、指定されたバージョンがインストールされない問題にハマった。  <br />
デフォルトである、1.4.4がインストールされている。</p>

<h4 id="解決方法">解決方法</h4>

<p>rolesのoverride_attributesとして指定すると指定されたバージョンがインストールされた。  <br />
基本的にvendor cookbookの値の定義はroleのoverride_attributeで指定したほうがいいのかもしれない。  <br />
とはいえ、パラメーターによっては上書きされる場合もあってそのあたりの挙動がよくわかっていない。</p>

<h3 id="checksumを指定しないといけない">Checksumを指定しないといけない</h3>

<p>sourceからインストールする場合、checksumを設定する必要がある。  <br />
checksumは以下のようにして作成できる。</p>

<pre><code>shasum -a 256 nginx-x.x.x.tar.gz

</code></pre>

<p>もしくは</p>

<pre><code>curl http://nginx.org/download/nginx-x.x.x.tar.gz | shasum -a 256

</code></pre>

<p>checksumは <code>node['nginx']['source']['checksum’]</code> に指定する。</p>

<h2 id="chefのattributeの優先順位について">ChefのAttributeの優先順位について</h2>

<p>マニュアルによると、以下のようになっている(しかし、versionをoverrideで定義しても上書きできなかった)。</p>

<ul>
  <li>A default attribute located in a cookbook attribute file</li>
  <li>A default attribute located in a recipe</li>
  <li>A default attribute located in an environment</li>
  <li>A default attribute located in role</li>
  <li>A force_default attribute located in a cookbook attribute file</li>
  <li>A force_default attribute located in a recipe</li>
  <li>A normal attribute located in a cookbook attribute file</li>
  <li>A normal attribute located in a recipe</li>
  <li>An override attribute located in a cookbook attribute file</li>
  <li>An override attribute located in a recipe</li>
  <li>An override attribute located in a role</li>
  <li>An override attribute located in an environment</li>
  <li>A force_override attribute located in a cookbook attribute file</li>
  <li>A force_override attribute located in a recipe</li>
  <li>An automatic attribute identified by Ohai at the start of the chef-client run</li>
</ul>

<p><a href="https://docs.chef.io/attributes.html#attribute-precedence">https://docs.chef.io/attributes.html#attribute-precedence</a></p>
<h2 id="attributeの使い分けについて">Attributeの使い分けについて</h2>

<p>以下のようにルール決めをしているという記事もあった。</p>

<blockquote>
  <p>Attributeファイル=&gt;文言変更  <br />
recipeファイル=&gt;テスト的に変えたいものがある時のみ。本番では消す。  <br />
Environmentファイル=&gt;development(開発）,alpha(実験用)、staging(テスト)、production（本番）でのIPやOSバージョンの違い。同じ構成が複数台ある時もここで区別。  <br />
Role=&gt;ミドルウェアのバージョン違い</p>
</blockquote>

<p><a href="http://dev.classmethod.jp/server-side/chef/attribute-overrides-pattern/">http://dev.classmethod.jp/server-side/chef/attribute-overrides-pattern/</a></p>
<h2 id="参考リンク">参考リンク</h2>

<ul>
  <li>
    <p><a href="http://stackoverflow.com/questions/27366774/chefexceptionschecksummismatch-when-installing-nginx-1-7-8-from-source">http://stackoverflow.com/questions/27366774/chefexceptionschecksummismatch-when-installing-nginx-1-7-8-from-source</a></p>  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chefのworkerが詰まって処理が進まなくなった]]></title>
    <link href="http://48n.jp/blog/2016/05/20/does-not-proceed-worker-is-blocked-processing-of-chef/"/>
    <updated>2016-05-20T17:40:56+09:00</updated>
    <id>http://48n.jp/blog/2016/05/20/does-not-proceed-worker-is-blocked-processing-of-chef</id>
    <content type="html"><![CDATA[<p>chefを実行したらこんなメッセージがでた。</p>

<pre><code>WARN: Chef client 24431 is running, will wait for it to finish and then run.

</code></pre>

<p>前回実行したChefが途中で詰まってしまい、ウンともスンとも言わなくなったので Ctrl + Cでとめたが、プロセス自体は残ってしまっている。</p>

<p>こんな感じで2つchef-clientのworkerが立ち上がっている状態。</p>

<pre><code>[shoyan@server01 ~]$ ps aux | grep chef
root     24373  0.0  0.1 178168  2992 ?        Ss   10:22   0:00 sudo -p knife sudo password:  chef-client -S http://127.0.0.1:18889
root     24426  0.0  3.1 262164 61072 ?        Sl   10:22   0:01 /opt/chef/embedded/bin/ruby /usr/bin/chef-client -S http://127.0.0.1:18889
root     24431  0.0  7.1 1078932 138052 ?      Sl   10:22   0:03 chef-client worker: ppid=24426;start=10:22:49;
root     26701  0.0  0.1 178168  2996 pts/3    Ss+  10:50   0:00 sudo -p knife sudo password:  chef-client -S http://127.0.0.1:18889
root     26754  0.0  3.1 261996 60896 pts/3    Sl+  10:50   0:01 /opt/chef/embedded/bin/ruby /usr/bin/chef-client -S http://127.0.0.1:18889
root     26759  0.0  3.0 261996 57760 pts/3    Sl+  10:50   0:00 chef-client worker: ppid=26754;start=10:50:38;

</code></pre>

<p>1時間ほど経過しても何も進まないので、プロセスをkillしてみた。</p>

<p>TERMシグナルを送ってみたが、反応なし。</p>

<pre><code># kill -s TERM 24431

</code></pre>

<p>killシグナルを送るとプロセスが終了し、ペンディング状態となっていたChefが実行された。</p>

<pre><code># kill -s KILL 24431

</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[マカレルでサーバーを監視する]]></title>
    <link href="http://48n.jp/blog/2016/05/19/the-server-monitored-by-mackerel/"/>
    <updated>2016-05-19T14:16:15+09:00</updated>
    <id>http://48n.jp/blog/2016/05/19/the-server-monitored-by-mackerel</id>
    <content type="html"><![CDATA[<p>サーバーの監視に<a href="https://mackerel.io/ja/features">マカレル</a>を導入してみました。  <br />
使ってみた感想としては、難しい設定もなく簡単に導入することができて、とてもよくできているなぁと関心しました。</p>

<h2 id="マカレルエージェントのインストール">マカレルエージェントのインストール</h2>

<p>マカレルでサーバーを監視をするには監視対象のサーバーにマカレルエージェントをインストールする必要があります。<br />
また、事前に申し込みをして、apikeyを発行しておく必要があります。</p>

<p>マカレルエージェントのインストールはChefを使って行います。  <br />
<a href="https://github.com/mackerelio/cookbook-mackerel-agent">cookbook-mackerel-agent</a>を使いました。</p>

<p>metadata.rb</p>

<pre><code>depends 'mackerel-agent'

</code></pre>

<p>recipes/default.rb</p>

<pre><code>include_recipe 'mackerel-agent'
include_recipe 'mackerel-agent::plugins'
yum_package 'mackerel-check-plugins'

</code></pre>

<p>cookbook-mackerel-agentだけだとcheckプラグインが入らなかったので<code>yum_package</code>リソースを使ってインストールしています。</p>

<p>attributes/default.rb</p>

<pre><code>default['mackerel-agent']['package-action'] = 'upgrade'
default['mackerel-agent']['conf']['apikey'] = ‘API KEYをかく'
default['mackerel-agent']['conf']['plugins'] = true

</code></pre>

<p>サーバーにレシピを適用するとマカレルの管理画面にサーバーがでてくるのでロールを設定します。  <br />
これでサーバーのメトリクスを見ることができます。</p>

<h2 id="プラグインを使う">プラグインを使う</h2>

<p>マカレルには様々なプラグインが用意されています。  <br />
使い方はgithubのREADMEに書いてあります。  <br />
https://github.com/mackerelio/mackerel-agent-plugins</p>

<p>自分はプラグインを使って以下のことを行っています。</p>

<h3 id="linuxマカレルプラグインを使って様々なメトリクスをだす">linuxマカレルプラグインを使って様々なメトリクスをだす</h3>

<p>linuxマカレルプラグインを使えばswapやnetstat、Disk read time 等のグラフを表示することができます。</p>

<p>attributes/default.rb に以下を定義します。</p>

<pre><code>default['mackerel-agent']['conf']['plugin.metrics.linux']['command'] = '/usr/local/bin/mackerel-plugin-linux'

</code></pre>

<h3 id="unicornマカレルプラグインを使ってunicornのメトリクスをだす">Unicornマカレルプラグインを使ってUnicornのメトリクスをだす</h3>

<p>Unicornマカレルプラグインを使えばダッシュボードにUnicornのメモリとワーカ数のグラフが表示されます。</p>

<p>attributes/default.rb に以下を定義します。</p>

<pre><code>default['mackerel-agent']['conf']['plugin.metrics.unicorn']['command'] = "/usr/local/bin/mackerel-plugin-unicorn -pidfile=/var/www/app/shared/tmp/pids/unicorn.pid"

</code></pre>

<h3 id="httpの監視">httpの監視</h3>

<p>httpのレスポンスをチェックして監視を行います。  <br />
細かい設定を行いたい場合は、<code>check-tcp</code>がよいですが、単純なチェックでよいのであれば<code>http</code>のほうが設定が簡単です。</p>

<p>attributes/default.rb に以下を定義します。</p>

<pre><code>default['mackerel-agent']['conf']['plugin.checks.http']['command'] = "/usr/bin/check-http -u http://localhost"

</code></pre>

<h3 id="ログファイルの監視">ログファイルの監視</h3>

<p>nginxのログファイルを監視し、500系のエラーが頻発したときは通知するようにします。</p>

<p>attributes/default.rb に以下を定義します。</p>

<pre><code>/usr/bin/check-log --file /var/log/nginx/access.log --pattern 'HTTP/1\.[01]" [5][0-9][0-9] ' --warning-over 3 --critical-over 10 --return

</code></pre>

<h2 id="監視ルールの設定">監視ルールの設定</h2>

<p>監視ルールを設定することで閾値を超えた際に通知をすることができます。  <br />
CPU、メモリ、ロードアベレージ、ディスク容量等の監視を管理画面より設定できます。  <br />
詳しい設定方法については以下を参照ください。</p>

<ul>
  <li><a href="https://mackerel.io/ja/docs/entry/howto/alerts">監視・通知を設定する - Mackerel ヘルプ</a></li>
</ul>

<h2 id="slackに通知する">Slackに通知する</h2>

<p>何か異常が起きた場合はSlackに通知をするようにします。  <br />
こちらも管理画面から設定できます。  <br />
具体的な設定方法については、ドキュメントを参照ください。</p>

<ul>
  <li><a href="https://mackerel.io/ja/docs/entry/howto/alerts">監視・通知を設定する - Mackerel ヘルプ</a></li>
</ul>

<h2 id="参考リンク">参考リンク</h2>
<ul>
  <li><a href="https://mackerel.io/ja/docs/">ヘルプ - Mackerel ヘルプ</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knife Zeroを使ってレシピを適用する]]></title>
    <link href="http://48n.jp/blog/2016/05/10/chef-converge-with-knife-zero/"/>
    <updated>2016-05-10T13:29:15+09:00</updated>
    <id>http://48n.jp/blog/2016/05/10/chef-converge-with-knife-zero</id>
    <content type="html"><![CDATA[<p>Chefでよく使われるknifeコマンドですが、そのプラグインである<a href="https://github.com/higanworks/knife-zero">knife zero</a>を使ってレシピを適用する方法を紹介します。  <br />
knife zeroはknifeプラグインで、リモートnode上でchef-clientを実行するツールです。</p>

<p>リモートnodeとはchefを適用するサーバー(管理対象となるサーバー)のことです。</p>

<h2 id="インストール">インストール</h2>

<p>今回はGemfileに定義してインストールします。</p>

<pre><code># Gemfile
gem 'knife-zero'

</code></pre>

<p>以下でインストールされます。</p>

<pre><code>$ bundle

</code></pre>

<h2 id="chefをリモートnodeにインストール">chefをリモートnodeにインストール</h2>

<p>まずはchefをリモートnodeにインストールします。  <br />
以下のコマンドでインストールします。</p>

<pre><code>$ bundle exec knife zero bootstrap shoyan@server01.example.com --sudo

</code></pre>

<p>実行すると <code>node/</code> 配下にファイルが作成さます。</p>

<p><code>chef_environment</code>と<code>run_list</code>を追加します。</p>

<pre><code>{
  "name": "server01.example.com",
  "chef_environment": "production",
  "run_list": [
    “role[awesome_cookbook]"
  ],
  "normal": {
    "knife_zero": {
      "host": "server01.example.com"
    },
    "tags": [

    ]
  },
  "automatic": {
    "fqdn": "server01.example.com",
    "os": "linux",
    "os_version": "2.6.32-504.3.3.el6.x86_64",
    "platform": "centos",
    "platform_version": "6.4",
    "hostname": "server01.example.com",
    "ipaddress": “192.168.1.1",
    "roles": [

    ]
  }
}

</code></pre>

<p>リモートnodeにログインして、chefのコマンドが実行されていることを確認してみます。</p>

<pre><code>$ ssh shoyan@server01.example.com

[shoyan@server01 ~]$ chef-[Tabを押す]
chef-apply   chef-client  chef-shell   chef-solo

</code></pre>

<h2 id="レシピをリモートnodeに適用する">レシピをリモートnodeに適用する</h2>

<p>Chefを実行する準備ができました。<br />
以下のコマンドでレシピをリモートnodeに適用します。</p>

<pre><code>$ bundle exec knife zero converge 'fqdn:server01.example.com' -x shoyan

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DockerコンテナにChefを流してみた]]></title>
    <link href="http://48n.jp/blog/2016/04/21/nginx-and-ruby-on-docker/"/>
    <updated>2016-04-21T18:19:01+09:00</updated>
    <id>http://48n.jp/blog/2016/04/21/nginx-and-ruby-on-docker</id>
    <content type="html"><![CDATA[<p>Chefのレシピを書くとき、Dockerコンテナにレシピを流せると気軽に確認ができてよいなと思い、DockerコンテナにChefを流せるようにしてみました。</p>

<p>リポジトリを作ったので参考にどうぞ。  <br />
https://github.com/shoyan/nginx-and-ruby-on-docker</p>

<h3 id="install">Install</h3>
<p>DockerとChefをインストールしている必要があるので、以下からインストールしてください。</p>

<p>Docker</p>

<ul>
  <li>
    <p><a href="https://www.docker.com/products/docker-toolbox">https://www.docker.com/products/docker-toolbox</a></p>  </li>
</ul>

<p>Chef</p>

<ul>
  <li>
    <p><a href="https://downloads.chef.io/chef-client/">https://downloads.chef.io/chef-client/</a></p>  </li>
</ul>

<h3 id="dockerコンテナにchefを流す">DockerコンテナにChefを流す</h3>
<p>まずは、Docker QuickStart TerminalをクリックしてDockerを起動します(アプリケーションにあります)。</p>

<p>Dockerを起動したらNginxとrubyをインストールするCookbookを実行します。</p>

<pre><code>$ git clone https://github.com/shoyan/nginx-and-ruby-on-docker
$ cd nginx-and-ruby-on-docker

</code></pre>

<p>以下のコマンドでimageをbuildします。</p>

<pre><code>$ docker build -t nginx-and-ruby .

</code></pre>

<p>imageを確認</p>

<pre><code>$  docker images
REPOSITORY             TAG                            IMAGE ID            CREATED             SIZE
nginx-and-ruby         latest                         6b4d5602119f        36 seconds ago      382.2 MB

</code></pre>

<p>Dockerのコンテナを起動します。  <br />
image_idは docker imagesのIMAGE IDを指定します。  <br />
今回の場合は6b4d5602119fです(場合により変わります)。</p>

<pre><code>$ docker run --privileged -d --name nginx-and-ruby image_id /sbin/init

</code></pre>

<p>–privilegedはCentOS7のimageでserviceコマンドを起動するおまじないです。  <br />
<a href="http://shoyan.github.io/blog/2016/04/14/start-systemctl-on-docker/">Dockerでsystemctlでserviceが起動できない</a></p>

<p>起動したDockerのコンテナにログインします。</p>

<pre><code>$ docker exec -it nginx-and-ruby bash

</code></pre>

<p>ログインしたらDockerコンテナでChefを実行します。</p>

<pre><code># chef-client -z -j nodes/bootstrap.json -c client.rb

</code></pre>

<p>Dockerを使うとChefを実行→コンテナを消す→真っさらな状態からもう一度Chefを流すというサイクルが気軽にできるので便利です。</p>

<p>もう一度真っさらな状態のコンテナを作りたいときは、以下のようにします。</p>

<pre><code>$ doker ps
CONTAINER ID        IMAGE                  COMMAND              CREATED             STATUS                        PORTS                                           NAMES
17a11c4b6ce8        6b4d5602119f           "/sbin/init"         2 hours ago         Exited (137) 12 seconds ago                                                   nginx-and-ruby

# Dockerコンテナを消す
$ docker rm -f 17a11c4b6ce8

# dockerコンテナを起動する
$ docker run --privileged -d --name nginx-and-ruby image_id /sbin/init

</code></pre>

<p><a href="https://github.com/shoyan/nginx-and-ruby-on-docker">https://github.com/shoyan/nginx-and-ruby-on-docker</a></p>
]]></content>
  </entry>
  
</feed>
