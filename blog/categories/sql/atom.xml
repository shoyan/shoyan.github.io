<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sql | SHOYAN BLOG]]></title>
  <link href="https://48n.jp/blog/categories/sql/atom.xml" rel="self"/>
  <link href="https://48n.jp/"/>
  <updated>2019-08-19T12:59:10+09:00</updated>
  <id>https://48n.jp/</id>
  <author>
    <name><![CDATA[Shohei Yamasaki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mysql_real_escape_string()のみで防げないSQLインジェクション]]></title>
    <link href="https://48n.jp/blog/2016/09/06/sql-injection/"/>
    <updated>2016-09-06T14:26:15+09:00</updated>
    <id>https://48n.jp/blog/2016/09/06/sql-injection</id>
    <content type="html"><![CDATA[<p>PHPアプリのSQLインジェクション対策として、<code>mysql_real_escape_string()</code> 等があるがこれだけでは万全ではないことがあるのでメモ。</p>

<p>例えば以下のSQLでは<code>mysql_real_escape_string()</code>を使っているが、脆弱性が存在する。</p>

<pre><code class="language-php">$id = mysql_real_escape_string("1 OR 1=1");
$sql = "SELECT * FROM table_name WHERE id = $id";
</code></pre>

<p><code>mysql_real_escape_string()</code> では上記を防ぐことができない。<br />
クエリ内の変数をシングルクォート（<code>'</code>）で囲むことで上記を防ぐことができる。</p>

<pre><code class="language-php">$id = mysql_real_escape_string("1 OR 1=1");
$sql = "SELECT * FROM table_name WHERE id = '$id'";
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[相関サブクエリを使って次回契約を取得する]]></title>
    <link href="https://48n.jp/blog/2015/09/25/to-get-the-next-contract-using-a-correlated-subquery/"/>
    <updated>2015-09-25T13:35:45+09:00</updated>
    <id>https://48n.jp/blog/2015/09/25/to-get-the-next-contract-using-a-correlated-subquery</id>
    <content type="html"><![CDATA[<p>相関サブクエリを使って次回契約を取得します。</p>

<h3 id="contract-table">Contract table</h3>
<p>| id | account_id | start_date | end_date | <br />
| — | — | — | — |<br />
| 1 | 1 | 20140101 | 20141231 | <br />
| 2 | 1 | 20150101 | 20151231 | <br />
| 3 | 1 | 20160101 | 20161231 | <br />
| 4 | 1 | 20170101 | 20171231 | <br />
| 5 | 2 | 20150101 | 20151231 | <br />
| 6 | 2 | 20160101 | 20161231 |</p>

<p>上記のようなaccount_idと開始日、終了日の登録してあるテーブルがあるとします。  <br />
現在の契約を取得するのは簡単ですね。</p>

<pre><code class="language-sql"># 現在契約を取得する
SELECT * FROM contracts WHERE start_date &gt;= 現在日付 AND end_date &lt;= 現在日付

</code></pre>

<p>現在契約を取得するのは簡単ですが、その次の契約を取得するとなるとそう単純にはいきません。</p>

<p>そこで、相関サブクエリを使います。  <br />
相関サブクエリを使うことで次回契約を取得できます。</p>

<pre><code class="language-sql"># 次回契約を取得する
SELECT * 
  FROM contracts As cont 
 WHERE start_date = (SELECT MIN(start_date) 
                       FROM contracts as c1
                     WHERE c1.start_date &gt; ( SELECT end_date 
                                               FROM contracts as c2
                                             WHERE c2.start_date &lt;= '20150528'
                                               AND c2.end_date &gt;= '20150528'
                                               AND c1.account_id = c2.account_id)
                       AND cont.account_id = c1.account_id
                     GROUP BY c1.account_id);

</code></pre>

<h3 id="結果">結果</h3>
<p>| id | account_id | start_date | end_date | <br />
| — | — | — | — |<br />
| 3 | 1 | 20160101 | 20161231 | <br />
| 6 | 2 | 20160101 | 20161231 |</p>

<h3 id="クエリの説明">クエリの説明</h3>
<p>クエリの説明をします。</p>

<p>クエリは内側からみていきます。  <br />
まずは、一番内側にある、 <code>SELECT end_date ... AND c1.account_id = c2.account_id</code>のクエリです。  <br />
このクエリでは現在の契約(ここでは2015/5/28とします)を取得します。</p>

<p>2つめのクエリで、次回以降の契約を取得します。  <br />
<code>SELECT MIN(start_date)</code> を使うことで、次回契約のなかで直近の契約を取得できます。  <br />
アカウントごとに直近の次回契約を取得したいので、GROUP BY account_id をしています。</p>

<p>c1.account_id = c2.account_id と cont.account_id = c1.account_id は行と行を比較するために必要です。</p>

<p>3つめのクエリ(<code>SELECT * ... WHERE start_date =</code>)で直近の次回契約を条件として、データを取得します。</p>

<p>手元で試したい方は以下のクエリでデータをつくれます。</p>

<pre><code class="language-sql">CREATE TABLE `contracts` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `account_id` int(11) DEFAULT NULL,
  `start_date` int(11) DEFAULT NULL,
  `end_date` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `contracts` (`id`, `account_id`, `start_date`, `end_date`)
VALUES
    (1, 1, 20140101, 20141231),
    (2, 1, 20150101, 20151231),
    (3, 1, 20160101, 20161231),
    (4, 1, 20170101, 20171231),
    (5, 2, 20150101, 20151231),
    (6, 2, 20160101, 20161231);

</code></pre>

]]></content>
  </entry>
  
</feed>
