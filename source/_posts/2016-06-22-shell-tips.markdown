---
layout: post
title: "ShellのTipsてきなやつ"
date: 2016-06-22 18:16:41 +0900
comments: true
categories: linux
description: "ShellスクリプトのTipsです。自分がShellのコードを読んだり書いたりしたときにでてきた疑問のメモでもあります。"
---

ShellスクリプトのTipsです。

## シェル変数の初期化をする

変数に値が設定されていない場合は、指定された値を返します。


```
: ${VAR:=初期化する値}

```

## パラメーターを取得する

`$@` にパラメーターが格納されています。

例えば以下の記述をした for.sh ファイルを作成します。


```
for role in "$@"; do
  echo $role
done

```

以下のように出力されます。


```
$ ./for.sh hoge moge
=> hoge
moge

```

## 評価結果を変数に格納する

`"$()"` で囲めば、評価結果を変数に格納することができます。


```
$ name="$(hostname)"
$ echo $name
=> shoyan-pc

# 以下も同じです。

$ name=`hostname`
$ echo $name
=> shoyan-pc

```

## if と test コマンドの合わせ技

ifとtestコマンドを使う場合はtestコマンドを省略した`[]`がよく使われます。

[ 文字列1 = 文字列2 ]  
[ 数値1 オプション 数値2 ]  
[ オプション 評価対象 ]  

[ の直後と ] の直前には必ず半角スペースが必要です (無いと正常に動作しません)。

ちなみに比較は `==` でなくて `=`です。

シェルの比較は文字列の比較と数値の比較があり、それぞれに対応するオペレーターがあります。  
そのせいで複雑になっている印象があります。

### 数値の比較

#### 数値1と数値2が等しいかどうか

`-eq`、もしくは `=`を使います。


```
$  [ 1 -eq 1 ]; echo $?
0
$  [ 1 = 1 ]; echo $?
0

```

#### 数値1と数値2が等しくないかどうか

`-ne` を使います。


```
$  [ 1 -ne 2 ]; echo $?
0

```

`!=` でも動作しますが、慣習的にあまり使わないようです。

### 文字列の比較
#### 文字列1と文字列2が等しいかどうか

同じ場合にtrueを返す`=`と その否定である `!=` を使います。


```
$  [ "hey" = "hey" ]; echo $?
0

```

ちなみに数値の比較に使う `-eq` で比較したところエラーとなりました。


```
$  [ "hey" -eq "hey" ]; echo $?
[: integer expression expected: hey
2

```

#### 文字列1と文字列2が等しくないかどうか

文字列比較のNOT条件
`!=`を使用します。


```
[ "$hoge" != "fuga" ]

```

数値比較のNOT条件

数値の比較の場合は `-ne` オプションを使うのが慣習のようです。


```
[ 1 -ne 2 ]

```

### 変数が空かどうか


```
[ -z "$hoge" ]

```

空でないかを判定する場合は `-n` を使います。


```
[ -n "$hoge" ]

```

### findで抽出したファイルをreadコマンドで1行ずつ処理する

```
find application -type f -name "*.ini" | while read LINE; do wc -l ${LINE}; done;
```

## 参考リンク

* [シェル変数のデフォルト値を設定する、未初期化時にエラーメッセージを出力してスクリプトを強制終了する - 百日半狂乱](http://doi-t.hatenablog.com/entry/2013/12/08/161929)
* [if 文と test コマンド - UNIX & Linux コマンド・シェルスクリプト リファレンス](http://shellscript.sunone.me/if_and_test.html#数値の比較:ed775c34e441eb16a91481d087cc1a74)
